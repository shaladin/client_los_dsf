import { ToastrService } from 'ngx-toastr';
import { Injectable, NgModule, Component, Input, ViewChild, Output, EventEmitter, defineInjectable } from '@angular/core';
import { CommonModule } from '@angular/common';
import { UCSearchComponent, UCSearchModule } from '@adins/ucsearch';
import { UcgridviewModule } from '@adins/ucgridview';
import { UcgridfooterComponent, UcgridfooterModule } from '@adins/ucgridfooter';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class UcpagingService {
    constructor() { }
}
UcpagingService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
UcpagingService.ctorParameters = () => [];
/** @nocollapse */ UcpagingService.ngInjectableDef = defineInjectable({ factory: function UcpagingService_Factory() { return new UcpagingService(); }, token: UcpagingService, providedIn: "root" });

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class InputSearchObj {
    constructor() {
        this.arrCritObj = null;
        this.addCritInput = null;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class InputGridObj {
    constructor() {
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class UcpagingComponent {
    /**
     * @param {?} toastr
     */
    constructor(toastr) {
        this.toastr = toastr;
        this.select = new EventEmitter();
        this.pageNow = 1;
        this.pageSize = 10;
        this.orderByKey = null;
        this.orderByValue = true;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        console.log("ucpaging");
        this.apiUrl = this.searchObj.enviromentUrl + this.searchObj.apiQryPaging;
        this.gridObj = new InputGridObj();
        this.gridObj.apiUrl = this.apiUrl;
        this.gridObj.deleteUrl = this.searchObj.enviromentUrl + this.searchObj.deleteUrl;
        this.gridObj.pageNow = this.pageNow;
        this.gridObj.pageSize = this.pageSize;
        this.gridObj.pagingJson = this.searchObj.pagingJson;
        this.gridObj.searchComp = this.searchComponent;
        this.inputObj = new InputSearchObj();
        this.inputObj._url = this.searchObj._url;
        this.inputObj.enviromentUrl = this.searchObj.enviromentUrl;
        this.inputObj.apiQryPaging = this.searchObj.apiQryPaging;
        this.inputObj.addCritInput = this.searchObj.addCritInput;
    }
    //** Start UC Search **/
    /**
     * @param {?} event
     * @return {?}
     */
    getResult(event) {
        if (event.response.Count == 0) {
            this.toastr.error("No Data Found");
        }
        this.gridObj.resultData = event.response;
        this.totalData = event.response.Count;
        this.ucgridFooter.pageNow = event.pageNow;
        this.ucgridFooter.totalData = this.totalData;
        this.ucgridFooter.resultData = this.gridObj.resultData;
    }
    /**
     * @param {?} event
     * @return {?}
     */
    getOutput(event) {
        this.orderByKey = event.orderByKey;
        this.orderByValue = event.orderByValue;
    }
    /**
     * @param {?} event
     * @return {?}
     */
    getSelect(event) {
        this.select.emit(event);
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onSelect(event) {
        this.pageNow = event.pageNow;
        this.pageSize = event.pageSize;
        this.gridObj.pageNow = event.pageNow;
        this.gridObj.pageSize = event.pageSize;
        this.searchPagination(this.pageNow);
    }
    /**
     * @param {?} event
     * @return {?}
     */
    searchPagination(event) {
        this.pageNow = event;
        this.gridObj.pageNow = event;
        /** @type {?} */
        var order = null;
        if (this.orderByKey != null) {
            order = {
                key: this.orderByKey,
                value: this.orderByValue
            };
        }
        this.searchComponent.search(this.apiUrl, this.pageNow, this.pageSize, order);
    }
}
UcpagingComponent.decorators = [
    { type: Component, args: [{
                selector: 'lib-ucpaging',
                template: "<lib-UCSearch id=\"ucSearch\" style=\"width:100%;\" [searchInput]='inputObj' (result)=\"getResult($event)\"></lib-UCSearch>\r\n\r\n<lib-ucgridview [gridInput]=\"gridObj\" (output)=\"getOutput($event)\" (select)=\"getSelect($event)\"></lib-ucgridview>\r\n\r\n<div [hidden]=\"gridObj?.resultData?.Data == null\">\r\n    <lib-ucgridfooter (select)=\"onSelect($event)\"></lib-ucgridfooter>\r\n</div>"
            }] }
];
/** @nocollapse */
UcpagingComponent.ctorParameters = () => [
    { type: ToastrService }
];
UcpagingComponent.propDecorators = {
    searchObj: [{ type: Input }],
    select: [{ type: Output }],
    searchComponent: [{ type: ViewChild, args: [UCSearchComponent,] }],
    ucgridFooter: [{ type: ViewChild, args: [UcgridfooterComponent,] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class UcpagingModule {
}
UcpagingModule.decorators = [
    { type: NgModule, args: [{
                declarations: [UcpagingComponent],
                imports: [
                    CommonModule,
                    UCSearchModule,
                    UcgridviewModule,
                    UcgridfooterModule
                ],
                exports: [UcpagingComponent]
            },] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { UcpagingService, UcpagingComponent, UcpagingModule };

//# sourceMappingURL=ucpaging.js.map