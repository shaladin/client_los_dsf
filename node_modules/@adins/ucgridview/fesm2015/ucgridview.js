import { HttpClient } from '@angular/common/http';
import { ToastrService } from 'ngx-toastr';
import { NgbModal } from '@ng-bootstrap/ng-bootstrap';
import { Injectable, NgModule, Component, Input, Output, EventEmitter, defineInjectable } from '@angular/core';
import { CommonModule } from '@angular/common';
import { RouterModule } from '@angular/router';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class UcgridviewService {
    constructor() { }
}
UcgridviewService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
UcgridviewService.ctorParameters = () => [];
/** @nocollapse */ UcgridviewService.ngInjectableDef = defineInjectable({ factory: function UcgridviewService_Factory() { return new UcgridviewService(); }, token: UcgridviewService, providedIn: "root" });

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class UcgridviewComponent {
    /**
     * @param {?} http
     * @param {?} toastr
     * @param {?} modalService
     */
    constructor(http, toastr, modalService) {
        this.http = http;
        this.toastr = toastr;
        this.modalService = modalService;
        this.output = new EventEmitter();
        this.select = new EventEmitter();
        this.isSeq = false;
        this.pageNow = 1;
        this.pageSize = 10;
        this.orderByKey = null;
        this.orderByValue = true;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.initiateForm();
    }
    /**
     * @return {?}
     */
    initiateForm() {
        this.getJSON(this.gridInput.pagingJson).subscribe((/**
         * @param {?} data
         * @return {?}
         */
        data => {
            console.log(data);
            this.isSeq = data.isSeq;
            this.headerList = data.headerList;
            this.bodyList = data.bodyList;
        }));
    }
    /**
     * @param {?} url
     * @return {?}
     */
    getJSON(url) {
        return this.http.get(url);
    }
    /**
     * @param {?} item
     * @param {?} param
     * @return {?}
     */
    genAction(item, param) {
        /** @type {?} */
        var arrList = {};
        for (var i = 0; i < param.length; i++) {
            if (item[param[i].type] != undefined || item[param[i].param] != undefined) {
                arrList[param[i].type] = item[param[i].property];
            }
            else {
                arrList[param[i].type] = param[i].property;
            }
        }
        return arrList;
    }
    /**
     * @param {?} item
     * @param {?} condList
     * @return {?}
     */
    switchCase(item, condList) {
        /** @type {?} */
        var condition = false;
        for (var i = 0; i < condList.conditions.length; i++) {
            if (item[condList.conditions[i].property] == condList.conditions[i].value) {
                condition = true;
            }
            else {
                condition = false;
                break;
            }
        }
        return condition;
    }
    /**
     * @param {?} event
     * @return {?}
     */
    searchSort(event) {
        if (this.orderByKey == event.target.attributes.name.nodeValue) {
            this.orderByValue = !this.orderByValue;
        }
        else {
            this.orderByValue = true;
        }
        this.orderByKey = event.target.attributes.name.nodeValue;
        /** @type {?} */
        var gridOutput = {
            orderByKey: this.orderByKey,
            orderByValue: this.orderByValue
        };
        this.output.emit(gridOutput);
        /** @type {?} */
        var order = {
            key: this.orderByKey,
            value: this.orderByValue
        };
        this.gridInput.searchComp.search(this.gridInput.apiUrl, this.gridInput.pageNow, this.gridInput.pageSize, order);
    }
    /**
     * @param {?} event
     * @return {?}
     */
    searchPagination(event) {
        this.pageNow = event;
        /** @type {?} */
        var order = null;
        if (this.orderByKey != null) {
            order = {
                key: this.orderByKey,
                value: this.orderByValue
            };
        }
        this.gridInput.searchComp.search(this.gridInput.apiUrl, this.pageNow, this.pageSize, order);
    }
    /**
     * @param {?} key
     * @param {?} value
     * @return {?}
     */
    delete(key, value) {
        if (confirm("Are you sure to delete this record?")) {
            /** @type {?} */
            var delId = {};
            delId[key] = value;
            this.http.post(this.gridInput.deleteUrl, delId).subscribe((/**
             * @param {?} response
             * @return {?}
             */
            (response) => {
                this.toastr.success(response['message'], 'Success!');
                this.searchPagination(this.pageNow);
            }), (/**
             * @param {?} error
             * @return {?}
             */
            (error) => {
                console.log(error);
            }));
        }
    }
    /**
     * @param {?} item
     * @return {?}
     */
    choose(item) {
        this.select.emit(item);
        this.modalService.dismissAll();
    }
}
UcgridviewComponent.decorators = [
    { type: Component, args: [{
                selector: 'lib-ucgridview',
                template: "<div [hidden]=\"gridInput?.resultData?.Data == null\">\r\n  <table class=\"table table-responsive-md text-center table-hover\">\r\n    <thead>\r\n      <tr class=\"table-header\">\r\n        <th *ngIf=\"isSeq == true\">No</th>\r\n        <th *ngFor=\"let head of headerList\"\r\n          [ngClass]=\"[head.position == 'left' ? 'text-left' : '', head.position == 'right' ? 'text-right' : '' , head.width == undefined || head.width == '' ? '' : head.width]\">\r\n          <span *ngIf=\"head.type == 'sort'\" translate class=\"thead-header\" (click)=\"searchSort($event)\"\r\n            attr.name=\"{{head.name}}\">{{head.label}}</span>\r\n          <span *ngIf=\"head.type == 'label'\">{{head.label}}</span>\r\n        </th>\r\n      </tr>\r\n    </thead>\r\n    <tbody>\r\n      <tr *ngFor=\"let item of gridInput?.resultData?.Data; let i = index\">\r\n        <td *ngIf=\"isSeq == true\">{{ i+1 }}</td>\r\n        <td *ngFor=\"let body of bodyList\" [ngClass]=\"{ 'text-left': body.position == 'left',\r\n                     'text-right': body.position == 'right' }\">\r\n          <span *ngIf=\"body.type == 'text'\">{{ item[body.property] }}</span>\r\n          <span *ngIf=\"body.type == 'decimal'\">{{ item[body.property] | number }}</span>\r\n          <span *ngIf=\"body.type == 'date'\">{{ item[body.property] | date: 'dd-MMM-yyyy' }}</span>\r\n          <span *ngIf=\"body.type == 'link'\">\r\n            <a [target]=\"body.target\" [routerLink]=\"[body.path]\"\r\n              [queryParams]=\"genAction(item,body.param)\">{{ item[body.property] }}</a>\r\n          </span>\r\n          <span *ngIf=\"body.type == 'boolean'\">\r\n            <span *ngIf=\"item[body.property] == '1'\">Yes</span>\r\n            <span *ngIf=\"item[body.property] == '0'\">No</span>\r\n            <span *ngIf=\"item[body.property] == '' || item[body.property] == null\">-</span>\r\n          </span>\r\n          <span *ngIf=\"body.type == 'action'\">\r\n            <span *ngFor=\"let act of body?.action\">\r\n              <span *ngIf=\"act.type == 'edit'\">\r\n                <a class=\"success p-0\" [routerLink]=\"[act.path]\" [queryParams]=\"genAction(item,act.param)\">\r\n                  <i class=\"font-medium-3 mr-2\"\r\n                    [ngClass]=\" act.icon == undefined || act.icon == '' ? 'ft-edit-2' : act.icon \"></i>\r\n                </a>\r\n              </span>\r\n              <span *ngIf=\"act.type == 'delete'\">\r\n                <a class=\"danger p-0\" (click)=\"delete(act.property,item[act.property])\">\r\n                  <i class=\"font-medium-3 mr-2\"\r\n                    [ngClass]=\" act.icon == undefined || act.icon == '' ? 'ft-trash-2 ' : act.icon \"></i>\r\n                </a>\r\n              </span>\r\n              <span *ngIf=\"act.type == 'select'\">\r\n                <a class=\"primary p-0 bold\" (click)=\"choose(item)\">\r\n                  select\r\n                </a>\r\n              </span>\r\n              <span *ngIf=\"act.type == 'switch'\">\r\n                <span *ngFor=\"let cs of act?.case\">\r\n                  <span *ngIf=\"switchCase(item,cs) && cs.isHide != true\">\r\n                    <a class=\"success p-0\" [routerLink]=\"[cs.result.path]\"\r\n                      [queryParams]=\"genAction(item,cs.result.param)\">\r\n                      <i class=\"font-medium-3 mr-2\"\r\n                        [ngClass]=\" cs.icon == undefined || cs.icon == '' ? 'ft-edit-2' : cs.icon \"></i>\r\n                    </a>\r\n                  </span>\r\n                </span>\r\n              </span>\r\n            </span>\r\n          </span>\r\n        </td>\r\n      </tr>\r\n    </tbody>\r\n  </table>\r\n</div>"
            }] }
];
/** @nocollapse */
UcgridviewComponent.ctorParameters = () => [
    { type: HttpClient },
    { type: ToastrService },
    { type: NgbModal }
];
UcgridviewComponent.propDecorators = {
    gridInput: [{ type: Input }],
    output: [{ type: Output }],
    select: [{ type: Output }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class UcgridviewModule {
}
UcgridviewModule.decorators = [
    { type: NgModule, args: [{
                declarations: [UcgridviewComponent],
                imports: [
                    CommonModule,
                    RouterModule
                ],
                exports: [UcgridviewComponent]
            },] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { UcgridviewService, UcgridviewComponent, UcgridviewModule };

//# sourceMappingURL=ucgridview.js.map