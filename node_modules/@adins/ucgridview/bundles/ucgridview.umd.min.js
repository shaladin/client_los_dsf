!function(t,e){"object"==typeof exports&&"undefined"!=typeof module?e(exports,require("@angular/common/http"),require("ngx-toastr"),require("@ng-bootstrap/ng-bootstrap"),require("@angular/core"),require("@angular/common"),require("@angular/router")):"function"==typeof define&&define.amd?define("ucgridview",["exports","@angular/common/http","ngx-toastr","@ng-bootstrap/ng-bootstrap","@angular/core","@angular/common","@angular/router"],e):e(t.ucgridview={},t.ng.common.http,t.ngxToastr,t.ngBootstrap,t.ng.core,t.ng.common,t.ng.router)}(this,function(t,e,r,n,o,a,i){"use strict";var s=(p.decorators=[{type:o.Injectable,args:[{providedIn:"root"}]}],p.ctorParameters=function(){return[]},p.ngInjectableDef=o.defineInjectable({factory:function(){return new p},token:p,providedIn:"root"}),p);function p(){}var d=(c.prototype.ngOnInit=function(){this.initiateForm()},c.prototype.initiateForm=function(){var e=this;this.getJSON(this.gridInput.pagingJson).subscribe(function(t){console.log(t),e.isSeq=t.isSeq,e.headerList=t.headerList,e.bodyList=t.bodyList})},c.prototype.getJSON=function(t){return this.http.get(t)},c.prototype.genAction=function(t,e){for(var r={},n=0;n<e.length;n++)t[e[n].type]!=undefined||t[e[n].param]!=undefined?r[e[n].type]=t[e[n].property]:r[e[n].type]=e[n].property;return r},c.prototype.switchCase=function(t,e){for(var r=!1,n=0;n<e.conditions.length;n++){if(t[e.conditions[n].property]!=e.conditions[n].value){r=!1;break}r=!0}return r},c.prototype.searchSort=function(t){this.orderByKey==t.target.attributes.name.nodeValue?this.orderByValue=!this.orderByValue:this.orderByValue=!0,this.orderByKey=t.target.attributes.name.nodeValue;var e={orderByKey:this.orderByKey,orderByValue:this.orderByValue};this.output.emit(e);var r={key:this.orderByKey,value:this.orderByValue};this.gridInput.searchComp.search(this.gridInput.apiUrl,this.gridInput.pageNow,this.gridInput.pageSize,r)},c.prototype.searchPagination=function(t){this.pageNow=t;var e=null;null!=this.orderByKey&&(e={key:this.orderByKey,value:this.orderByValue}),this.gridInput.searchComp.search(this.gridInput.apiUrl,this.pageNow,this.pageSize,e)},c.prototype["delete"]=function(t,e){var r=this;if(confirm("Are you sure to delete this record?")){var n={};n[t]=e,this.http.post(this.gridInput.deleteUrl,n).subscribe(function(t){r.toastr.success(t.message,"Success!"),r.searchPagination(r.pageNow)},function(t){console.log(t)})}},c.prototype.choose=function(t){this.select.emit(t),this.modalService.dismissAll()},c.decorators=[{type:o.Component,args:[{selector:"lib-ucgridview",template:'<div [hidden]="gridInput?.resultData?.Data == null">\r\n  <table class="table table-responsive-md text-center table-hover">\r\n    <thead>\r\n      <tr class="table-header">\r\n        <th *ngIf="isSeq == true">No</th>\r\n        <th *ngFor="let head of headerList"\r\n          [ngClass]="[head.position == \'left\' ? \'text-left\' : \'\', head.position == \'right\' ? \'text-right\' : \'\' , head.width == undefined || head.width == \'\' ? \'\' : head.width]">\r\n          <span *ngIf="head.type == \'sort\'" translate class="thead-header" (click)="searchSort($event)"\r\n            attr.name="{{head.name}}">{{head.label}}</span>\r\n          <span *ngIf="head.type == \'label\'">{{head.label}}</span>\r\n        </th>\r\n      </tr>\r\n    </thead>\r\n    <tbody>\r\n      <tr *ngFor="let item of gridInput?.resultData?.Data; let i = index">\r\n        <td *ngIf="isSeq == true">{{ i+1 }}</td>\r\n        <td *ngFor="let body of bodyList" [ngClass]="{ \'text-left\': body.position == \'left\',\r\n                     \'text-right\': body.position == \'right\' }">\r\n          <span *ngIf="body.type == \'text\'">{{ item[body.property] }}</span>\r\n          <span *ngIf="body.type == \'decimal\'">{{ item[body.property] | number }}</span>\r\n          <span *ngIf="body.type == \'date\'">{{ item[body.property] | date: \'dd-MMM-yyyy\' }}</span>\r\n          <span *ngIf="body.type == \'link\'">\r\n            <a [target]="body.target" [routerLink]="[body.path]"\r\n              [queryParams]="genAction(item,body.param)">{{ item[body.property] }}</a>\r\n          </span>\r\n          <span *ngIf="body.type == \'boolean\'">\r\n            <span *ngIf="item[body.property] == \'1\'">Yes</span>\r\n            <span *ngIf="item[body.property] == \'0\'">No</span>\r\n            <span *ngIf="item[body.property] == \'\' || item[body.property] == null">-</span>\r\n          </span>\r\n          <span *ngIf="body.type == \'action\'">\r\n            <span *ngFor="let act of body?.action">\r\n              <span *ngIf="act.type == \'edit\'">\r\n                <a class="success p-0" [routerLink]="[act.path]" [queryParams]="genAction(item,act.param)">\r\n                  <i class="font-medium-3 mr-2"\r\n                    [ngClass]=" act.icon == undefined || act.icon == \'\' ? \'ft-edit-2\' : act.icon "></i>\r\n                </a>\r\n              </span>\r\n              <span *ngIf="act.type == \'delete\'">\r\n                <a class="danger p-0" (click)="delete(act.property,item[act.property])">\r\n                  <i class="font-medium-3 mr-2"\r\n                    [ngClass]=" act.icon == undefined || act.icon == \'\' ? \'ft-trash-2 \' : act.icon "></i>\r\n                </a>\r\n              </span>\r\n              <span *ngIf="act.type == \'select\'">\r\n                <a class="primary p-0 bold" (click)="choose(item)">\r\n                  select\r\n                </a>\r\n              </span>\r\n              <span *ngIf="act.type == \'switch\'">\r\n                <span *ngFor="let cs of act?.case">\r\n                  <span *ngIf="switchCase(item,cs) && cs.isHide != true">\r\n                    <a class="success p-0" [routerLink]="[cs.result.path]"\r\n                      [queryParams]="genAction(item,cs.result.param)">\r\n                      <i class="font-medium-3 mr-2"\r\n                        [ngClass]=" cs.icon == undefined || cs.icon == \'\' ? \'ft-edit-2\' : cs.icon "></i>\r\n                    </a>\r\n                  </span>\r\n                </span>\r\n              </span>\r\n            </span>\r\n          </span>\r\n        </td>\r\n      </tr>\r\n    </tbody>\r\n  </table>\r\n</div>'}]}],c.ctorParameters=function(){return[{type:e.HttpClient},{type:r.ToastrService},{type:n.NgbModal}]},c.propDecorators={gridInput:[{type:o.Input}],output:[{type:o.Output}],select:[{type:o.Output}]},c);function c(t,e,r){this.http=t,this.toastr=e,this.modalService=r,this.output=new o.EventEmitter,this.select=new o.EventEmitter,this.isSeq=!1,this.pageNow=1,this.pageSize=10,this.orderByKey=null,this.orderByValue=!0}var u=(l.decorators=[{type:o.NgModule,args:[{declarations:[d],imports:[a.CommonModule,i.RouterModule],exports:[d]}]}],l);function l(){}t.UcgridviewService=s,t.UcgridviewComponent=d,t.UcgridviewModule=u,Object.defineProperty(t,"__esModule",{value:!0})});
//# sourceMappingURL=ucgridview.umd.min.js.map