{"version":3,"sources":["ng://ucgridview/lib/ucgridview.service.ts","ng://ucgridview/lib/ucgridview.component.ts","ng://ucgridview/lib/ucgridview.module.ts"],"names":["UcgridviewService","Injectable","args","providedIn","UcgridviewComponent","prototype","ngOnInit","this","initiateForm","_this","getJSON","gridInput","pagingJson","subscribe","data","console","log","isSeq","headerList","bodyList","url","http","get","genAction","item","param","arrList","i","length","type","undefined","property","switchCase","condList","condition","conditions","value","searchSort","event","orderByKey","target","attributes","name","nodeValue","orderByValue","gridOutput","output","emit","order","key","searchComp","search","apiUrl","pageNow","pageSize","searchPagination","delete","confirm","delId","post","deleteUrl","response","toastr","success","error","choose","select","modalService","dismissAll","Component","selector","template","HttpClient","ToastrService","NgbModal","Input","Output","EventEmitter","UcgridviewModule","NgModule","declarations","imports","CommonModule","RouterModule","exports"],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class UcgridviewService {\r\n\r\n  constructor() { }\r\n}\r\n","import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { ToastrService } from 'ngx-toastr';\r\nimport { NgbModal } from '@ng-bootstrap/ng-bootstrap';\r\n\r\n@Component({\r\n  selector: 'lib-ucgridview',\r\n  templateUrl: './ucgridview.component.html',\r\n  styles: []\r\n})\r\nexport class UcgridviewComponent implements OnInit {\r\n\r\n  @Input() gridInput: any;\r\n  @Output() output: EventEmitter<any> = new EventEmitter();\r\n  @Output() select: EventEmitter<any> = new EventEmitter();\r\n  \r\n  pagingJson: any;\r\n  headerList: any;\r\n  bodyList: any;\r\n  isSeq: any = false;\r\n\r\n  pageNow: any = 1;\r\n  pageSize: any = 10;\r\n  orderByKey: any = null;\r\n  orderByValue: boolean = true;\r\n\r\n  constructor(private http: HttpClient, public toastr: ToastrService, private modalService: NgbModal) { }\r\n\r\n  ngOnInit() {\r\n    this.initiateForm();\r\n  }\r\n\r\n  initiateForm() {\r\n    this.getJSON(this.gridInput.pagingJson).subscribe(data => {\r\n      console.log(data);\r\n      this.isSeq = data.isSeq;\r\n      this.headerList = data.headerList;\r\n      this.bodyList = data.bodyList;\r\n\r\n    })\r\n  }\r\n\r\n  public getJSON(url: string): Observable<any> {\r\n    return this.http.get(url);\r\n  }\r\n\r\n  genAction(item, param) {\r\n    var arrList = {};\r\n\r\n    for (var i = 0; i < param.length; i++) {\r\n      if (item[param[i].type] != undefined || item[param[i].param] != undefined) {\r\n        arrList[param[i].type] = item[param[i].property];\r\n      } else {\r\n        arrList[param[i].type] = param[i].property;\r\n      }\r\n    }\r\n    return arrList;\r\n  }\r\n  \r\n  switchCase(item, condList) {\r\n    var condition = false;\r\n\r\n    for (var i = 0; i < condList.conditions.length; i++) {\r\n      if (item[condList.conditions[i].property] == condList.conditions[i].value) {\r\n        condition = true;\r\n      } else {\r\n        condition = false;\r\n        break;\r\n      }\r\n    }\r\n    return condition;\r\n  }\r\n\r\n  searchSort(event: any) {\r\n    if (this.orderByKey == event.target.attributes.name.nodeValue) {\r\n      this.orderByValue = !this.orderByValue;\r\n    } else {\r\n      this.orderByValue = true;\r\n    }\r\n    this.orderByKey = event.target.attributes.name.nodeValue;\r\n    var gridOutput = {\r\n      orderByKey: this.orderByKey,\r\n      orderByValue: this.orderByValue\r\n    }\r\n    this.output.emit(gridOutput);\r\n    var order = {\r\n      key: this.orderByKey,\r\n      value: this.orderByValue\r\n    }\r\n    this.gridInput.searchComp.search(this.gridInput.apiUrl, this.gridInput.pageNow, this.gridInput.pageSize, order);\r\n  }\r\n\r\n  searchPagination(event: number) {\r\n    this.pageNow = event;\r\n    var order = null;\r\n    if (this.orderByKey != null) {\r\n      order = {\r\n        key: this.orderByKey,\r\n        value: this.orderByValue\r\n      }\r\n    }\r\n    this.gridInput.searchComp.search(this.gridInput.apiUrl, this.pageNow, this.pageSize, order);\r\n  }\r\n\r\n  delete(key: any, value: any) {\r\n    if (confirm(\"Are you sure to delete this record?\")) {\r\n      var delId = {};\r\n      delId[key] = value;\r\n      this.http.post(this.gridInput.deleteUrl, delId).subscribe(\r\n        (response) => {\r\n          this.toastr.success(response['message'], 'Success!');\r\n          this.searchPagination(this.pageNow);\r\n        },\r\n        (error) => {\r\n          console.log(error);\r\n        });\r\n    }\r\n  }\r\n\r\n  choose(item) {\r\n    this.select.emit(item);\r\n    this.modalService.dismissAll();\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { UcgridviewComponent } from './ucgridview.component';\r\nimport { CommonModule } from '@angular/common';\r\nimport { RouterModule } from '@angular/router';\r\n\r\n@NgModule({\r\n  declarations: [UcgridviewComponent],\r\n  imports: [\r\n    CommonModule,\r\n    RouterModule\r\n  ],\r\n  exports: [UcgridviewComponent]\r\n})\r\nexport class UcgridviewModule { }\r\n"]}