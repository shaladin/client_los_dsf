import { HttpClient } from '@angular/common/http';
import { DOCUMENT } from '@angular/platform-browser';
import { saveAs } from 'file-saver';
import { utils, write } from 'xlsx';
import { trigger, transition, style, animate, state } from '@angular/animations';
import { Injectable, Component, Input, ViewChild, Inject, Renderer2, EventEmitter, Output, NgModule, defineInjectable } from '@angular/core';
import { formatDate, CommonModule } from '@angular/common';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class UCSearchService {
    constructor() { }
}
UCSearchService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
UCSearchService.ctorParameters = () => [];
/** @nocollapse */ UCSearchService.ngInjectableDef = defineInjectable({ factory: function UCSearchService_Factory() { return new UCSearchService(); }, token: UCSearchService, providedIn: "root" });

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class CriteriaObj {
    constructor() {
        this.low = 0;
        this.high = 0;
        this.DataType = 'Text';
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class RequestCriteriaObj {
    constructor() {
        this.includeCount = true;
        this.includeData = true;
        this.isLoading = true;
        this.queryString = '';
        this.rowVersion = '';
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class AdInsConstant {
}
AdInsConstant.RestrictionLike = "Like";
AdInsConstant.RestrictionEq = "Eq";
AdInsConstant.showData = "10,50,100";
AdInsConstant.TimeoutSession = 6000000;
AdInsConstant.GetListProduct = "http://creator_websvr:7272/NEW_FINANCING/api/Catalog/getPopularViewByCriteria";
AdInsConstant.Login = "/UserManagement/HTML5Login";
AdInsConstant.LoginToken = "/UserManagement/HTML6Login";
AdInsConstant.Logout = "/UserManagement/LogOut";
AdInsConstant.GetListOffice = "/RefOffice/GetRefOfficePaging";
AdInsConstant.GetProvince = "/los/v1/get_provinsi";
AdInsConstant.GetCityByProvince = "/los/v1/get_kota";
AdInsConstant.getProspectByProspectNo = "/api/MobileProspectTask/GetProspectByProspectNo";
AdInsConstant.submitNCProspect = "/api/MobileProspectTask/submitNCProspect";
AdInsConstant.addCustPersonal = "";
AdInsConstant.FormDefault = "dashboard/dash-board";
//GENERAL SETTING
AdInsConstant.GetBusinessDt = "/GeneralSetting/GetBusinessDate";
AdInsConstant.AddGeneralSetting = "/GeneralSetting/AddGeneralSetting";
AdInsConstant.EditGeneralSetting = "/GeneralSetting/EditGeneralSetting";
AdInsConstant.GetGeneralSettingPaging = "/GeneralSetting/GetGeneralSettingPaging";
AdInsConstant.GetGeneralSettingById = "/GeneralSetting/GetGeneralSettingById";
AdInsConstant.GetGeneralSettingValue = "/GeneralSetting/GetGeneralSettingValue";
//REF OFFICE
AdInsConstant.GetRefOfficeObj = "/RefOffice/GetRefOfficeObj";
AdInsConstant.GetRefOfficeActiveAndNonVirtualKeyValue = "/RefOffice/GetRefOfficeActiveAndNonVirtualKeyValue";
AdInsConstant.GetAllRefOffice = "/RefOffice/GetAllRefOffice";
AdInsConstant.GetListUpperHierarchyRefOfficeByRefOrgId = "/RefOffice/GetListUpperHierarchyRefOfficeByRefOrgId";
AdInsConstant.AddRefOffice = "/RefOffice/AddRefOffice";
AdInsConstant.EditRefOffice = "/RefOffice/EditRefOffice";
AdInsConstant.DeleteRefOffice = "/RefOffice/DeleteRefOffice";
//REF OFFICE AREA
AdInsConstant.GetAllListArea = "/RefOfficeArea/GetAllListArea";
AdInsConstant.GetRefOfficeAreaPaging = "/RefOfficeArea/GetRefOfficeAreaPaging";
AdInsConstant.GetRefArea = "/RefOfficeArea/GetRefArea";
AdInsConstant.AddRefOfficeArea = "/RefOfficeArea/AddRefOfficeArea";
AdInsConstant.EditRefOfficeArea = "/RefOfficeArea/EditRefOfficeArea";
AdInsConstant.DeleteRefOfficeArea = "/RefOfficeArea/DeleteRefOfficeArea";
AdInsConstant.CheckDuplAreaCode = "/RefOfficeArea/CheckDuplAreaCode";
//ORGANIZATION
AdInsConstant.GetRefOrg = "/OrganizationDefinition/GetRefOrg";
AdInsConstant.EditRefOrgWithOldParentId = "/OrganizationDefinition/EditRefOrgWithOldParentId";
AdInsConstant.DeleteRefOrg = "/OrganizationDefinition/DeleteRefOrg";
AdInsConstant.GetListAllRefOrg = "/OrganizationDefinition/GetListAllRefOrg";
AdInsConstant.AddRefOrg = "/OrganizationDefinition/AddRefOrg";
AdInsConstant.GetRefOrgPaging = "/OrganizationDefinition/GetRefOrgPaging";
AdInsConstant.GetAllRefBizUnit = "/OrganizationDefinition/GetAllRefBizUnit";
AdInsConstant.GetOrgJobTitleByMdlStruc = "/OrganizationDefinition/GetOrgJobTitleByMdlStruc";
AdInsConstant.GetRefBizUnitByOffice = "/OrganizationDefinition/GetRefBizUnitByOffice";
AdInsConstant.GetAllOrgMdl = "/OrganizationDefinition/GetAllOrgMdl";
AdInsConstant.GetAllActiveOrgMdlByRefOrgId = "/OrganizationDefinition/GetAllActiveOrgMdlByRefOrgId";
AdInsConstant.GetOrgMdlPaging = "/OrganizationDefinition/GetOrgMdlPaging";
AdInsConstant.DeleteOrgMdl = "/OrganizationDefinition/DeleteOrgMdl";
AdInsConstant.EditOrgMdl = "/OrganizationDefinition/EditOrgMdl";
AdInsConstant.AddOrgMdl = "/OrganizationDefinition/AddOrgMdl";
AdInsConstant.GetOrgMdl = "/OrganizationDefinition/GetOrgMdl";
AdInsConstant.GetOrgMdlByOrgMdlId = "/OrganizationDefinition/GetOrgMdlByOrgMdlId";
AdInsConstant.GetAllRefBizUnitKeyValuePair = "/OrganizationDefinition/GetAllRefBizUnitKeyValuePair";
AdInsConstant.DeleteOrgMdlStruc = "/OrganizationDefinition/DeleteOrgMdlStruc";
AdInsConstant.AddOrgMdlStruc = "/OrganizationDefinition/AddOrgMdlStruc";
AdInsConstant.EditOrgMdlStruc = "/OrganizationDefinition/EditOrgMdlStruc";
AdInsConstant.GetOrgMdlStruc = "/OrganizationDefinition/GetOrgMdlStruc";
AdInsConstant.GetOrgMdlStrucPaging = "/OrganizationDefinition/GetOrgMdlStrucPaging";
AdInsConstant.GetOrgMdlStrucById = "/OrganizationDefinition/GetOrgMdlStrucById";
//REF-JOB-TITLE
AdInsConstant.GetRefJobTitle = "/OrganizationDefinition/GetRefJobTitlePaging";
AdInsConstant.AddRefJobTitle = "/OrganizationDefinition/AddRefJobTitle";
AdInsConstant.EditRefJobTitle = "/OrganizationDefinition/EditRefJobTitle";
AdInsConstant.DeleteRefJobTitle = "/OrganizationDefinition/DeleteRefJobTitle";
AdInsConstant.GetJobPositionLvl = "/OrganizationDefinition/GetJobPositionLvl";
AdInsConstant.GetRefJobTitleById = "/OrganizationDefinition/GetRefJobTitleByRefJobTitleId";
//ORG JOB TITLE
AdInsConstant.GetOrgJobTitlePaging = "/OrganizationDefinition/GetOrgJobTitlePaging";
AdInsConstant.AddOrgJobTitle = "/OrganizationDefinition/AddOrgJobTitle";
AdInsConstant.EditOrgJobTitle = "/OrganizationDefinition/EditOrgJobTitle";
AdInsConstant.DeleteOrgJobTitle = "/OrganizationDefinition/DeleteOrgJobTitle";
AdInsConstant.GetOrgJobTitleByOrgJobTitleId = "/OrganizationDefinition/GetOrgJobTitleByOrgJobTitleId";
//REF-BANK
AdInsConstant.GetBankPaging = "/RefBank/GetRefBankPaging";
AdInsConstant.GetBank = "/RefBank/GetBank";
AdInsConstant.EditRefBank = "/RefBank/EditRefBank";
AdInsConstant.AddRefBank = "/RefBank/AddRefBank";
AdInsConstant.DeleteRefBank = "/RefBank/DeleteRefBank";
AdInsConstant.GetBankByBankCode = "/RefBank/GetBankByBankCode";
//REF-EMP
AdInsConstant.GetListEmployee = "/RefEmp/GetRefEmpPaging";
AdInsConstant.GetRefEmployeeById = "/RefEmp/GetEmp";
AdInsConstant.AddRefEmp = "/RefEmp/AddRefEmp";
AdInsConstant.EditRefEmp = "/RefEmp/EditRefEmp";
AdInsConstant.DeleteRefEmployee = "/RefEmp/DeleteRefEmp";
AdInsConstant.AddEmpBankAcc = "/EmpBankAcc/AddEmpBankAcc";
AdInsConstant.GetEmpBankAccByRefEmpId = "/EmpBankAcc/GetEmpBankAccByRefEmpId";
AdInsConstant.AddRefEmpAndEmpBankAcc = "/RefEmp/AddRefEmpAndEmpBankAcc";
AdInsConstant.EditRefEmpAndEmpBankAcc = "/RefEmp/EditRefEmpAndEmpBankAcc";
AdInsConstant.DeleteRefEmpAndEmpBankAcc = "/RefEmp/DeleteRefEmpAndEmpBankAcc";
AdInsConstant.GetListEmployeebyRefEmpId = "/EmpPosition/GetListEmployeebyRefEmpId";
AdInsConstant.GetEmpListByOfficeIdAndIsActive = "/RefEmp/GetEmpListByOfficeIdAndIsActive";
//EMP_POSITION
AdInsConstant.GetEmpPositionPaging = "/EmpPosition/GetEmpPositionPaging";
AdInsConstant.GetEmpByEmpPositionId = "/EmpPosition/GetEmpByEmpPositionId";
AdInsConstant.AddEmpPosition = "/EmpPosition/AddEmpPosition";
AdInsConstant.EditEmpPosition = "/EmpPosition/EditEmpPosition";
AdInsConstant.DeleteEmpPosition = "/EmpPosition/DeleteEmpPosition";
AdInsConstant.GetListUserEmployee = "/EmpPosition/GetListUserEmployee";
//REF-USER
AdInsConstant.GetRefUserPaging = "/UserManagement/GetRefUserPaging";
AdInsConstant.AddRefUser = "/UserManagement/AddRefUser";
AdInsConstant.EditRefUser = "/UserManagement/EditRefUser";
AdInsConstant.ChangePassword = "/UserManagement/ChangePassword";
AdInsConstant.GetRefUser = "/UserManagement/GetRefUser";
AdInsConstant.GetUserByUsername = "/UserManagement/GetUserByUsername";
AdInsConstant.ValidatePwd = "/UserManagement/ValidatePwd";
AdInsConstant.GetCountRefUserByRefEmpId = "/UserManagement/GetCountRefUserByRefEmpId";
AdInsConstant.ResetPassword = "/UserManagement/ResetPassword";
//REF-ROLE
AdInsConstant.GetRefRolePaging = "/UserManagement/GetRefRolePaging";
AdInsConstant.AddRefRole = "/UserManagement/AddRefRole";
AdInsConstant.EditRefRole = "/UserManagement/EditRefRole";
AdInsConstant.DeleteRefRole = "/UserManagement/DeleteRefRole";
AdInsConstant.GetRefRoleByRefRoleId = "/RefRole/GetRefRoleByRefRoleId";
AdInsConstant.GetRefRole = "/RefRole/GetRefRole";
AdInsConstant.GetListDataCurrentUser = "/UserManagement/GetListDataCurrentUser";
AdInsConstant.GetRefRoleByEmpPositionId = "/RefRole/GetRefRoleByEmpPositionId";
AdInsConstant.EditUserTitleRole = "/UserManagement/EditUserTitleRole";
AdInsConstant.AddUserTitleRole = "/UserManagement/AddUserTitleRole";
AdInsConstant.AssignRoleToUsers = "/UserManagement/AssignRoleToUsers";
AdInsConstant.GetUserTitleRoleByEmpPositionIdAndRefRoleId = "/UserManagement/GetUserTitleRoleByEmpPositionIdAndRefRoleId";
//ZIPCODE
AdInsConstant.GetRefZipcodePaging = "/RefZipcode/GetRefZipcodePaging";
AdInsConstant.GetRefZipCode = "/RefZipcode/GetRefZipcode";
AdInsConstant.GetRefProvDistrictObj = "/RefProvDistrict/GetRefProvDistrict";
AdInsConstant.EditRefZipcode = "/RefZipcode/EditRefZipCode";
AdInsConstant.AddRefZipcode = "/RefZipcode/AddRefZipCode";
AdInsConstant.DeleteRefZipcode = "/RefZipcode/DeleteRefZipCode";
//BUSINESS UNIT
AdInsConstant.GetBusinessUnitPaging = "/OrganizationDefinition/GetRefBizUnitPaging";
AdInsConstant.GetRefBizUnit = "/OrganizationDefinition/GetRefBizUnit";
AdInsConstant.AddRefBizUnit = "/OrganizationDefinition/AddRefBizUnit";
AdInsConstant.EditRefBizUnit = "/OrganizationDefinition/EditRefBizUnit";
//REF COY
AdInsConstant.GetRefCoyPaging = "/RefCoy/GetRefCoyPaging";
AdInsConstant.GetRefCoy = "/RefCoy/GetRefCoy";
AdInsConstant.EditRefCoy = "/RefCoy/EditRefCoy";
AdInsConstant.GetCoyBodPaging = "/CoyBod/GetCoyBodPaging";
AdInsConstant.AddCoyBod = "/CoyBod/AddCoyBOD";
AdInsConstant.EditCoyBod = "/CoyBod/EditCoyBOD";
AdInsConstant.DeleteCoyBod = "/CoyBod/DeleteCoyBOD";
AdInsConstant.GetCoyBod = "/CoyBod/GetCoyBod";
AdInsConstant.GetCommissionerPaging = "/CoyCommissioner/GetCoyCommissionerPaging";
AdInsConstant.AddCoyCommissioner = "/CoyCommissioner/AddCoyCommissioner";
AdInsConstant.EditCoyCommissioner = "/CoyCommissioner/EditCoyCommissioner";
AdInsConstant.DeleteCoyCommissioner = "/CoyCommissioner/DeleteCoyCommissioner";
AdInsConstant.GetCoyCommissioner = "/CoyCommissioner/GetCoyCommissioner";
//REF TAX OFFICE
AdInsConstant.GetAllActiveRefTaxOffice = "/RefTaxOffice/GetAllActiveRefTaxOffice";
//REF MASTER
AdInsConstant.GetRefMasterList = "/RefMaster/GetRefMasterList";
AdInsConstant.GetRefMastersByCriteria = "/RefMaster/GetRefMastersByCriteria";
AdInsConstant.GetRefMaster = "/RefMaster/GetRefMaster";
AdInsConstant.GetRefMasterListByTypeCode = "/RefMaster/GetRefMasterListByTypeCode";
AdInsConstant.GetRefMasterListKeyValuePair = "/RefMaster/GetRefMasterListKeyValuePair";
AdInsConstant.AddRefMaster = "/RefMaster/AddRefMaster";
AdInsConstant.EditRefMaster = "/RefMaster/EditRefMaster";
AdInsConstant.GetRefMasterType = "/RefMaster/GetRefMasterType";
AdInsConstant.DeleteRefMaster = "/RefMaster/DeleteRefMaster";
AdInsConstant.GetRefMasterPaging = "/RefMaster/GetRefMasterPaging";
//REF PROV DISTRICT
AdInsConstant.GetRefProvDistrictPaging = "/RefProvDistrict/GetRefProvDistrictPaging";
//MENU
AdInsConstant.GetRefFormPaging = "/MenuManagement/GetRefFormPaging";
AdInsConstant.GetAllActiveRefFormByRefRoleId = "/MenuManagement/GetAllActiveRefFormByRefRoleId";
AdInsConstant.GetRefFormByRefFormId = "/MenuManagement/GetRefFormByRefFormId";
AdInsConstant.EditRefForm = "/MenuManagement/EditRefForm";
AdInsConstant.AddRefForm = "/MenuManagement/AddRefForm";
AdInsConstant.DeleteRefForm = "/MenuManagement/DeleteRefForm";
AdInsConstant.AssignRoleToForms = "/MenuManagement/AssignRoleToForms";
AdInsConstant.GetAllAuthFormsByRefRoleId = "/MenuManagement/GetAllAuthFormsByRefRoleId";
AdInsConstant.GetAuthByRefFormIdAndRefRoleId = "/MenuManagement/GetAuthByRefFormIdAndRefRoleId";
AdInsConstant.UpdateFormFeatureAuthForm = "/MenuManagement/UpdateFormFeatureAuthForm";
//FORM FEATURE
AdInsConstant.GetListRefFeature = "/RefFeature/GetListRefFeature";
AdInsConstant.GetRefFeatureByComponent = "/RefFeature/GetRefFeatureByComponent";
//HOLIDAY
AdInsConstant.GetAllActiveHolidaySchmH = "/Holiday/GetAllActiveHolidaySchmH";
AdInsConstant.GetHolidayPaging = "/Holiday/GetHolidayPaging";
AdInsConstant.AddHolidaySchmH = "/Holiday/AddHolidaySchmH";
AdInsConstant.AddHolidaySchmD = "/Holiday/AddHolidaySchmD";
AdInsConstant.AddHolidaySchmDUntilYear = "/Holiday/AddHolidaySchmDUntilYear";
AdInsConstant.GetHolidaySchmH = "/Holiday/GetHolidaySchmH";
AdInsConstant.EditHolidaySchmHOnly = "/Holiday/EditHolidaySchmHOnly";
AdInsConstant.DeleteHolidaySchmH = "/Holiday/DeleteHolidaySchmH";
AdInsConstant.DeleteHolidaySchmD = "/Holiday/DeleteHolidaySchmD";
AdInsConstant.GetHolidayDetailPaging = "/Holiday/GetHolidayDetailPaging";
//USER SESSION LOG
AdInsConstant.SelectRole = "/UserSessionLog/SelectRole";
//NOTIFICATION
AdInsConstant.NotificationPost = "/Message/Post";
//REF CURR
AdInsConstant.GetRefCurrPaging = "/RefCurr/GetRefCurrPaging";
AdInsConstant.AddRefCurr = "/RefCurr/AddRefCurr";
AdInsConstant.EditRefCurr = "/RefCurr/EditRefCurr";
AdInsConstant.GetRefCurr = "/RefCurr/GetRefCurr";
AdInsConstant.AddExchangeRate = "/RefCurr/AddExchangeRate";
AdInsConstant.EditExchangeRate = "/RefCurr/EditExchangeRate";
AdInsConstant.GetExchangeRate = "/RefCurr/GetExchangeRate";
//WORKHOUR
AdInsConstant.GetListOfWorkingHourSchm = "/WorkHour/GetListOfWorkingHourSchm";
AdInsConstant.GetWorkHourSchmHPaging = "/WorkHour/GetWorkHourSchmHPaging";
AdInsConstant.AddWorkingHourSchmH = "/WorkHour/AddWorkingHourSchmH";
AdInsConstant.EditWorkingHourSchmH = "/WorkHour/EditWorkingHourSchmH";
AdInsConstant.GetWorkingHourSchmH = "/WorkHour/GetWorkingHourSchmH";
AdInsConstant.GetWorkingHourSchmD = "/WorkHour/GetWorkingHourSchmD";
AdInsConstant.DeleteWorkingHourSchmH = "/WorkHour/DeleteWorkingHourSchmH";

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const EXCEL_TYPE = 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8';
/** @type {?} */
const EXCEL_EXTENSION = '.xlsx';
class ExcelService {
    constructor() { }
    /**
     * @param {?} json
     * @param {?} excelFileName
     * @return {?}
     */
    exportAsExcelFile(json, excelFileName) {
        /** @type {?} */
        const worksheet = utils.json_to_sheet(json);
        console.log('worksheet', worksheet);
        /** @type {?} */
        const workbook = { Sheets: { 'data': worksheet }, SheetNames: ['data'] };
        /** @type {?} */
        const excelBuffer = write(workbook, { bookType: 'xlsx', type: 'array' });
        //const excelBuffer: any = XLSX.write(workbook, { bookType: 'xlsx', type: 'buffer' });
        this.saveAsExcelFile(excelBuffer, excelFileName);
    }
    /**
     * @private
     * @param {?} buffer
     * @param {?} fileName
     * @return {?}
     */
    saveAsExcelFile(buffer, fileName) {
        /** @type {?} */
        const data = new Blob([buffer], {
            type: EXCEL_TYPE
        });
        saveAs(data, fileName + '_export_' + new Date().getTime() + EXCEL_EXTENSION);
    }
}
ExcelService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
ExcelService.ctorParameters = () => [];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class UCSearchComponent {
    /**
     * @param {?} http
     * @param {?} excelService
     * @param {?} _renderer2
     * @param {?} _document
     */
    constructor(http, excelService, _renderer2, _document) {
        this.http = http;
        this.excelService = excelService;
        this._renderer2 = _renderer2;
        this._document = _document;
        this.result = new EventEmitter();
        this.pageSize = 10;
        this.pageNow = 1;
        this.isDataLoaded = false;
        this.isHidden = false;
        this.currentState = 'initial';
        this.payLoad = '';
        this.countForm = 0;
        this.formattedAmount = '';
        this.amount = 0;
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    hide(obj) {
        console.log(obj);
        /** @type {?} */
        var target = event.srcElement;
        console.log(target);
        // var idAttr = target.attributes.id;
        // var value = idAttr.nodeValue;
    }
    /**
     * @return {?}
     */
    changeState() {
        this.currentState = this.currentState === 'initial' ? 'final' : 'initial';
        this.isHidden = this.isHidden === false ? true : false;
        console.log(this.currentState);
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.apiUrl = this.searchInput.enviromentUrl + this.searchInput.apiQryPaging;
        this.arrCrit = this.searchInput.arrCritObj;
        /** @type {?} */
        let js = this._renderer2.createElement('script');
        js.text = `
          $(document).ready(function(){
            $("#flip").click(function(){
              $("#panel").slideToggle("slow");
            });
          });
        `;
        this._renderer2.appendChild(this._document.body, js);
        this.initiateForm();
    }
    /**
     * @return {?}
     */
    initiateForm() {
        this.getJSON(this.searchInput._url).subscribe((/**
         * @param {?} data
         * @return {?}
         */
        data => {
            console.log(data);
            this.configuration = data;
            this.urlGet = data.url;
            this.exportData = data.exportExcel;
            this.countForm = data.component.length;
            this.isDataLoaded = true;
            for (var i = 0; i < this.countForm; i++) {
                //ini kalau datanya di load dari URL
                if (data.component[i].isFromURL == true) {
                    /** @type {?} */
                    var request = new RequestCriteriaObj();
                    /** @type {?} */
                    var arrayCrit = new Array();
                    /** @type {?} */
                    var criteriaObject = new CriteriaObj();
                    criteriaObject.DataType = "text";
                    criteriaObject.propName = data.component[i].criteriaPropName;
                    criteriaObject.value = data.component[i].criteriaPropValue;
                    criteriaObject.restriction = "eq";
                    arrayCrit.push(criteriaObject);
                    request.criteria = arrayCrit;
                    request[data.component[i].criteriaPropName] = data.component[i].criteriaPropValue;
                    //lempar objectnya sekalian sama urlnya, nnti di bind di dalem karena masalah di asyncnya
                    //biar tiap function ada state2nya sendiri
                    this.resolveObject(data.component[i], data.component[i].url, request);
                }
                if (data.component[i].type == "numeric") {
                    data.component[i].value = parseFloat(data.component[i].value).toLocaleString('en');
                }
                //pengecekan tanggal
                if (data.component[i].type == "datepicker") {
                    if (data.component[i].value.includes("BD")) {
                        /** @type {?} */
                        let businessDate = new Date(JSON.parse(localStorage.getItem("UserContext")).BusinessDate);
                        /** @type {?} */
                        var operator = data.component[i].value.charAt(2);
                        /** @type {?} */
                        var dateShow = new Date();
                        if (operator == "-") {
                            /** @type {?} */
                            var tempMinus = data.component[i].value.split("-", 2);
                            /** @type {?} */
                            var numDay = parseInt(tempMinus[1]);
                            dateShow.setDate(businessDate.getDate() - numDay);
                        }
                        else if (operator == "+") {
                            /** @type {?} */
                            var tempMinus = data.component[i].value.split("+", 2);
                            /** @type {?} */
                            var numDay = parseInt(tempMinus[1]);
                            dateShow.setDate(businessDate.getDate() + numDay);
                        }
                        /** @type {?} */
                        var dateText = formatDate(dateShow, 'yyyy-MM-dd', 'en-US');
                        data.component[i].value = dateText;
                    }
                }
            }
        }));
    }
    /**
     * @param {?} url
     * @return {?}
     */
    getJSON(url) {
        return this.http.get(url);
    }
    /**
     * @param {?} url
     * @param {?=} criteria
     * @return {?}
     */
    postJSON(url, criteria = null) {
        return this.http.post(url, criteria);
    }
    /**
     * @return {?}
     */
    searchClick() {
        this.orderByKey = null;
        this.orderByValue = true;
        this.pageNow = 1;
        this.search(this.apiUrl, this.pageNow, this.pageSize, null, this.arrCrit);
    }
    /**
     * @return {?}
     */
    reset() {
        this.initiateForm();
    }
    /**
     * @param {?} apiUrl
     * @param {?} pageNo
     * @param {?} rowPerPage
     * @param {?} orderBy
     * @param {?=} addCrit
     * @return {?}
     */
    search(apiUrl, pageNo, rowPerPage, orderBy, addCrit = new Array()) {
        /** @type {?} */
        var request = new RequestCriteriaObj();
        /** @type {?} */
        var arrCrit = new Array();
        request.pageNo = pageNo;
        request.rowPerPage = rowPerPage;
        request.orderBy = orderBy;
        request.queryString = this.configuration.querystring;
        for (var i = 0; i < this.countForm; i++) {
            /** @type {?} */
            var critObj = new CriteriaObj();
            /** @type {?} */
            var component = this.myForm.nativeElement[i];
            critObj.DataType = component.getAttribute('data-type');
            console.log(component);
            //Ini khusus kalau dari Drop Down
            if (component.value != "") {
                if (component.nodeName == 'SELECT') {
                    /** @type {?} */
                    var ddl = component.options;
                    /** @type {?} */
                    var text = ddl[ddl.selectedIndex].value;
                    if (text != "All") {
                        //Kalau Dari Dropdown udah pasti pake Eq
                        critObj.restriction = AdInsConstant.RestrictionEq;
                        critObj.propName = component.name;
                        critObj.value = text;
                        arrCrit.push(critObj);
                    }
                }
                else {
                    //Kalau ada Percent maka yang dipake nnti adalah Restrictions Like
                    critObj.propName = component.name;
                    critObj.value = component.value;
                    if (component.value.includes("%")) {
                        critObj.restriction = AdInsConstant.RestrictionLike;
                    }
                    //kalau componentnya Date, restrictionsnya lgsg ambil dari property JSONnya
                    else if (component.getAttribute('data-restriction') != "" && component.getAttribute('data-restriction') != null) {
                        critObj.restriction = component.getAttribute('data-restriction');
                        if (component.getAttribute('data-type') == 'numeric') {
                            component.value = parseFloat(component.value.replace(/,/g, ''));
                            console.log(component.value);
                        }
                    }
                    else {
                        critObj.restriction = AdInsConstant.RestrictionEq;
                    }
                    arrCrit.push(critObj);
                }
            }
        }
        if (addCrit != null && addCrit != undefined) {
            if (addCrit.length != 0) {
                for (var i = 0; i < addCrit.length; i++) {
                    arrCrit.push(addCrit[i]);
                }
            }
            else if (this.searchInput.addCritInput != null || this.searchInput.addCritInput != undefined) {
                for (var i = 0; i < this.searchInput.addCritInput.length; i++) {
                    arrCrit.push(this.searchInput.addCritInput[i]);
                }
            }
        }
        else if (this.searchInput.addCritInput != null || this.searchInput.addCritInput != undefined) {
            for (var i = 0; i < this.searchInput.addCritInput.length; i++) {
                arrCrit.push(this.searchInput.addCritInput[i]);
            }
        }
        request.criteria = arrCrit;
        this.http.post(apiUrl, request).subscribe((/**
         * @param {?} response
         * @return {?}
         */
        (response) => {
            /** @type {?} */
            var qryPaging = {
                response: response,
                pageNow: pageNo
            };
            console.log(qryPaging);
            this.result.emit(qryPaging);
            return response;
        }));
    }
    /**
     * @return {?}
     */
    lessThanFour() {
        if (this.countForm > 3) {
            return false;
        }
        else {
            return true;
        }
    }
    /**
     * @param {?} obj
     * @param {?} url
     * @param {?=} crit
     * @return {?}
     */
    resolveObject(obj, url, crit = null) {
        /** @type {?} */
        const val = this.postJSON(url, crit);
        val.subscribe((/**
         * @param {?} tempData
         * @return {?}
         */
        tempData => {
            obj.itemsUrl = tempData.ReturnObject;
        }));
    }
    /**
     * @param {?} element
     * @return {?}
     */
    transformAmount(element) {
        this.formattedAmount = parseFloat(element.target.value).toLocaleString('en');
        // Remove or comment this line if you dont want
        // to show the formatted amount in the textbox.
        element.target.value = this.formattedAmount;
    }
    /**
     * @param {?} element
     * @return {?}
     */
    transformToDecimal(element) {
        element.target.value = parseFloat(element.target.value.toString().replace(/,/g, ''));
    }
    /**
     * @return {?}
     */
    exportAsXLSX() {
        /** @type {?} */
        var request = new RequestCriteriaObj();
        request.pageNo = 1;
        request.rowPerPage = 9999;
        request.orderBy = null;
        request.criteria = [];
        request.queryString = this.configuration.querystring;
        this.http.post(this.apiUrl, request).subscribe((/**
         * @param {?} response
         * @return {?}
         */
        response => {
            this.ExcelData = response["Data"];
            this.excelService.exportAsExcelFile(this.ExcelData, 'sample');
            console.log(response);
        }), (/**
         * @param {?} error
         * @return {?}
         */
        (error) => {
            console.log(error);
        }));
    }
    /**
     * @param {?} optValue
     * @param {?} afFilter
     * @return {?}
     */
    onChangeEvent(optValue, afFilter) {
        /** @type {?} */
        var jsonComp = this.configuration.component;
        for (var i = 0; i < afFilter.affectedFilter.length; i++) {
            for (var j = 0; j < jsonComp.length; j++) {
                if (jsonComp[j].name == afFilter.affectedFilter[i]) {
                    /** @type {?} */
                    var request = new RequestCriteriaObj();
                    /** @type {?} */
                    var arrayCrit = new Array();
                    if (optValue != "All") {
                        /** @type {?} */
                        var critObj = new CriteriaObj();
                        critObj.DataType = afFilter.datatype;
                        critObj.propName = afFilter.name;
                        critObj.value = optValue;
                        critObj.restriction = AdInsConstant.RestrictionEq;
                        arrayCrit.push(critObj);
                    }
                    request.criteria = arrayCrit;
                    this.resolveObject(jsonComp[j], jsonComp[j].url, request);
                }
            }
        }
    }
}
UCSearchComponent.decorators = [
    { type: Component, args: [{
                selector: 'lib-UCSearch',
                template: "<!-- Basic form layout section start -->\r\n<section id=\"horizontal-form-layouts\">\r\n  <div class=\"row text-left\">\r\n    <div class=\"col-md-12\">\r\n      <div class=\"card\">\r\n        <div class=\"card-body\">\r\n          <div class=\"px-3\">\r\n            <form class=\"form form-horizontal\" id=\"formSearch\" #formIdSearch>\r\n              <div class=\"form-body\">\r\n                <h4 class=\"form-section font-weight-bold\">\r\n                  <div (click)=\"changeState()\" class=\"btn no-padding cursor-pointer flip\">\r\n                    <i class=\"fa\" style=\"font-size: 15px; margin: 0px 0px 5px -15px;\" [ngClass]=\"isHidden ? 'fa-chevron-right' : 'fa-chevron-down'\"></i>\r\n                  </div>\r\n                  {{configuration?.title}} \r\n                </h4>\r\n                <!-- Ini Digunakan untuk Generate Dynamic Component -->\r\n                <!-- [hidden]=\"isHidden\" -->\r\n                <div class=\"panel-active\" [@changeDivSize]=currentState>\r\n                  <div class=\"row\">\r\n                    <div class=\"col-md-6 form-group\"\r\n                      *ngFor=\"let question of configuration?.component\">\r\n                      <div class=\"col-md-12\">\r\n                        <div class=\"row\">\r\n                        <label class=\"col-md-5 no-padding\" for=\"{{question.id}}\"\r\n                          translate>{{question.label}}</label>\r\n                        <div class=\"col-md-7 no-padding\">\r\n                          <div *ngIf=\"question.type=='textbox'\">\r\n                            <input type=\"text\" id=\"{{question.id}}\" class=\"form-control search-form-control\"\r\n                              name=\"{{question.name}}\" value=\"{{question.value}}\"\r\n                              attr.data-type=\"{{question.datatype}}\" attr.data-restriction=\"{{question.restriction}}\" >\r\n                          </div>\r\n                          <div *ngIf=\"question.type=='textarea'\">\r\n                            <textarea type=\"text\" id=\"{{question.id}}\" class=\"form-control search-form-control\"\r\n                              name=\"{{question.name}}\" attr.data-type=\"{{question.datatype}}\"\r\n                              value=\"{{question.value}}\"></textarea>\r\n                          </div>\r\n                          <div *ngIf=\"question.type=='numeric'\">\r\n                            <input type=\"text\" id=\"{{question.id}}\" (focus)=\"transformToDecimal($event)\"\r\n                              (blur)=\"transformAmount($event)\" class=\"form-control search-form-control\"\r\n                              name=\"{{question.name}}\" value=\"{{question.value}}\"\r\n                              attr.data-restriction=\"{{question.restriction}}\" attr.data-type=\"{{question.datatype}}\">\r\n                          </div>\r\n                          \r\n                          <!-- End Hardcode Lookup didalem-->\r\n                          <div *ngIf=\"question.type=='datepicker'\">\r\n                            <input type=\"date\" id=\"{{question.id}}\" class=\"form-control search-form-control btn-lookup\"\r\n                              name=\"{{question.name}}\" value=\"{{question.value}}\" attr.data-type=\"{{question.datatype}}\"\r\n                              attr.data-restriction=\"{{question.restriction}}\">\r\n                          </div>\r\n                          <div *ngIf=\"question.type=='dropdown'\">\r\n                            <!-- Ini kalau datanya tidak di load dari URL -->\r\n                            <div *ngIf=\"!question.isFromURL\">\r\n                              <select name=\"{{question.name}}\"\r\n                                class=\"form-control search-form-control\" attr.data-type=\"{{question.datatype}}\">\r\n                                <option *ngIf=\"!question.isSelectOne\" value=\"All\">\r\n                                  All\r\n                                </option>\r\n                                <option *ngFor=\"let item of question?.items\" value=\"{{item.key}}\">\r\n                                  {{item.value}}\r\n                                </option>\r\n                              </select>\r\n                            </div>\r\n                            <!-- Ini kalau datanya di load dari URL -->\r\n                            <div *ngIf=\"question.isFromURL\">\r\n                                <div *ngIf=\"question.isEvent\">\r\n                                    <select name=\"{{question.name}}\" (change)=\"onChangeEvent($event.target.value, question)\"\r\n                                      class=\"form-control search-form-control\" attr.data-type=\"{{question.datatype}}\">\r\n                                      <option *ngIf=\"!question.isSelectOne\" value=\"All\">\r\n                                        All\r\n                                      </option>\r\n                                      <option *ngFor=\"let item of question?.itemsUrl\" value=\"{{item.Key}}\">\r\n                                        {{item.Value}}\r\n                                      </option>\r\n                                    </select>\r\n                                </div>\r\n                                <div *ngIf=\"!question.isEvent\">\r\n                                    <select name=\"{{question.name}}\"\r\n                                      class=\"form-control search-form-control\" attr.data-type=\"{{question.datatype}}\">\r\n                                      <option *ngIf=\"!question.isSelectOne\" value=\"All\">\r\n                                        All\r\n                                      </option>\r\n                                      <option *ngFor=\"let item of question?.itemsUrl\" value=\"{{item.Key}}\">\r\n                                        {{item.Value}}\r\n                                      </option>\r\n                                    </select>\r\n                                </div>\r\n                            </div>\r\n                          </div>\r\n                        </div>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                  <div class=\"col-md-12 no-padding\">\r\n                    <form>\r\n                      <div class=\"form-actions right\">\r\n                        <button *ngIf=\"exportData == true\" type=\"button\" (click)=\"exportAsXLSX()\"\r\n                          class=\"btn btn-raised btn-success mr-1\" translate>\r\n                          <i class=\"fa ft-download\"></i> Export Excel\r\n                        </button>\r\n                        <button type=\"button\" (click)=\"reset()\" class=\"btn btn-raised btn-warning mr-1\" translate>\r\n                          <i class=\"ft-x\"></i> Reset\r\n                        </button>\r\n                        <button type=\"button\" (click)=\"searchClick()\" class=\"btn btn-raised btn-primary\" translate>\r\n                          <i class=\"fa fa-search\"></i> Search\r\n                        </button>\r\n                      </div>\r\n                    </form>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </form>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</section>\r\n<br>\r\n<!-- // Basic form layout section end -->",
                providers: [ExcelService],
                animations: [
                    trigger('changeDivSize', [
                        state('initial', style({
                            height: '*',
                            opacity: '1',
                        })),
                        state('final', style({
                            height: '0px',
                            opacity: '0',
                            overflow: 'hidden',
                        })),
                        transition('initial=>final', animate('300ms')),
                        transition('final=>initial', animate('300ms'))
                    ]),
                ]
            }] }
];
/** @nocollapse */
UCSearchComponent.ctorParameters = () => [
    { type: HttpClient },
    { type: ExcelService },
    { type: Renderer2 },
    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }
];
UCSearchComponent.propDecorators = {
    myForm: [{ type: ViewChild, args: ['formIdSearch',] }],
    searchInput: [{ type: Input }],
    result: [{ type: Output }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class UCSearchModule {
}
UCSearchModule.decorators = [
    { type: NgModule, args: [{
                declarations: [UCSearchComponent],
                imports: [
                    CommonModule
                ],
                exports: [UCSearchComponent]
            },] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { UCSearchService, UCSearchComponent, UCSearchModule, ExcelService as ɵa };

//# sourceMappingURL=ucsearch.js.map