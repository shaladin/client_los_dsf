/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { ChangeDetectorRef, Component, ContentChildren, ElementRef, EventEmitter, Inject, Input, Optional, Output, QueryList, ViewChild, ViewEncapsulation, } from '@angular/core';
import { Subscription } from 'rxjs';
import { first } from 'rxjs/operators';
import { ContextMenuItemDirective } from './contextMenu.item.directive';
import { ContextMenuService } from './contextMenu.service';
import { CONTEXT_MENU_OPTIONS } from './contextMenu.tokens';
/**
 * @record
 */
export function ILinkConfig() { }
if (false) {
    /** @type {?} */
    ILinkConfig.prototype.click;
    /** @type {?|undefined} */
    ILinkConfig.prototype.enabled;
    /** @type {?} */
    ILinkConfig.prototype.html;
}
/**
 * @record
 */
export function MouseLocation() { }
if (false) {
    /** @type {?|undefined} */
    MouseLocation.prototype.left;
    /** @type {?|undefined} */
    MouseLocation.prototype.marginLeft;
    /** @type {?|undefined} */
    MouseLocation.prototype.marginTop;
    /** @type {?|undefined} */
    MouseLocation.prototype.top;
}
var ContextMenuComponent = /** @class */ (function () {
    function ContextMenuComponent(_contextMenuService, changeDetector, elementRef, options) {
        var _this = this;
        this._contextMenuService = _contextMenuService;
        this.changeDetector = changeDetector;
        this.elementRef = elementRef;
        this.options = options;
        this.menuClass = "";
        this.autoFocus = false;
        this.useBootstrap4 = false;
        this.disabled = false;
        this.close = new EventEmitter();
        this.open = new EventEmitter();
        this.visibleMenuItems = [];
        this.links = [];
        this.subscription = new Subscription();
        if (options) {
            this.autoFocus = options.autoFocus;
            this.useBootstrap4 = options.useBootstrap4;
        }
        this.subscription.add(_contextMenuService.show.subscribe((/**
         * @param {?} menuEvent
         * @return {?}
         */
        function (menuEvent) {
            _this.onMenuEvent(menuEvent);
        })));
    }
    /**
     * @return {?}
     */
    ContextMenuComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.subscription.unsubscribe();
    };
    /**
     * @param {?} menuEvent
     * @return {?}
     */
    ContextMenuComponent.prototype.onMenuEvent = /**
     * @param {?} menuEvent
     * @return {?}
     */
    function (menuEvent) {
        var _this = this;
        if (this.disabled) {
            return;
        }
        var contextMenu = menuEvent.contextMenu, event = menuEvent.event, item = menuEvent.item;
        if (contextMenu && contextMenu !== this) {
            return;
        }
        this.event = event;
        this.item = item;
        this.setVisibleMenuItems();
        this._contextMenuService.openContextMenu(tslib_1.__assign({}, menuEvent, { menuItems: this.visibleMenuItems, menuClass: this.menuClass }));
        this._contextMenuService.close.asObservable().pipe(first()).subscribe((/**
         * @param {?} closeEvent
         * @return {?}
         */
        function (closeEvent) { return _this.close.emit(closeEvent); }));
        this.open.next(menuEvent);
    };
    /**
     * @param {?} menuItem
     * @return {?}
     */
    ContextMenuComponent.prototype.isMenuItemVisible = /**
     * @param {?} menuItem
     * @return {?}
     */
    function (menuItem) {
        return this.evaluateIfFunction(menuItem.visible);
    };
    /**
     * @return {?}
     */
    ContextMenuComponent.prototype.setVisibleMenuItems = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.visibleMenuItems = this.menuItems.filter((/**
         * @param {?} menuItem
         * @return {?}
         */
        function (menuItem) { return _this.isMenuItemVisible(menuItem); }));
    };
    /**
     * @param {?} value
     * @return {?}
     */
    ContextMenuComponent.prototype.evaluateIfFunction = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (value instanceof Function) {
            return value(this.item);
        }
        return value;
    };
    ContextMenuComponent.decorators = [
        { type: Component, args: [{
                    encapsulation: ViewEncapsulation.None,
                    selector: 'context-menu',
                    template: " ",
                    styles: ["\n    .cdk-overlay-container {\n      position: fixed;\n      z-index: 1000;\n      pointer-events: none;\n      top: 0;\n      left: 0;\n      width: 100%;\n      height: 100%;\n    }\n    .ngx-contextmenu.cdk-overlay-pane {\n      position: absolute;\n      pointer-events: auto;\n      box-sizing: border-box;\n    }\n  "]
                }] }
    ];
    /** @nocollapse */
    ContextMenuComponent.ctorParameters = function () { return [
        { type: ContextMenuService },
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [CONTEXT_MENU_OPTIONS,] }] }
    ]; };
    ContextMenuComponent.propDecorators = {
        menuClass: [{ type: Input }],
        autoFocus: [{ type: Input }],
        useBootstrap4: [{ type: Input }],
        disabled: [{ type: Input }],
        close: [{ type: Output }],
        open: [{ type: Output }],
        menuItems: [{ type: ContentChildren, args: [ContextMenuItemDirective,] }],
        menuElement: [{ type: ViewChild, args: ['menu', { static: false },] }]
    };
    return ContextMenuComponent;
}());
export { ContextMenuComponent };
if (false) {
    /** @type {?} */
    ContextMenuComponent.prototype.menuClass;
    /** @type {?} */
    ContextMenuComponent.prototype.autoFocus;
    /** @type {?} */
    ContextMenuComponent.prototype.useBootstrap4;
    /** @type {?} */
    ContextMenuComponent.prototype.disabled;
    /** @type {?} */
    ContextMenuComponent.prototype.close;
    /** @type {?} */
    ContextMenuComponent.prototype.open;
    /** @type {?} */
    ContextMenuComponent.prototype.menuItems;
    /** @type {?} */
    ContextMenuComponent.prototype.menuElement;
    /** @type {?} */
    ContextMenuComponent.prototype.visibleMenuItems;
    /** @type {?} */
    ContextMenuComponent.prototype.links;
    /** @type {?} */
    ContextMenuComponent.prototype.item;
    /** @type {?} */
    ContextMenuComponent.prototype.event;
    /**
     * @type {?}
     * @private
     */
    ContextMenuComponent.prototype.subscription;
    /**
     * @type {?}
     * @private
     */
    ContextMenuComponent.prototype._contextMenuService;
    /**
     * @type {?}
     * @private
     */
    ContextMenuComponent.prototype.changeDetector;
    /**
     * @type {?}
     * @private
     */
    ContextMenuComponent.prototype.elementRef;
    /**
     * @type {?}
     * @private
     */
    ContextMenuComponent.prototype.options;
}
//# sourceMappingURL=data:application/json;base64,