/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ChangeDetectorRef, Component, ContentChildren, ElementRef, EventEmitter, Inject, Input, Optional, Output, QueryList, ViewChild, ViewEncapsulation, } from '@angular/core';
import { Subscription } from 'rxjs';
import { first } from 'rxjs/operators';
import { ContextMenuItemDirective } from './contextMenu.item.directive';
import { ContextMenuService } from './contextMenu.service';
import { CONTEXT_MENU_OPTIONS } from './contextMenu.tokens';
/**
 * @record
 */
export function ILinkConfig() { }
if (false) {
    /** @type {?} */
    ILinkConfig.prototype.click;
    /** @type {?|undefined} */
    ILinkConfig.prototype.enabled;
    /** @type {?} */
    ILinkConfig.prototype.html;
}
/**
 * @record
 */
export function MouseLocation() { }
if (false) {
    /** @type {?|undefined} */
    MouseLocation.prototype.left;
    /** @type {?|undefined} */
    MouseLocation.prototype.marginLeft;
    /** @type {?|undefined} */
    MouseLocation.prototype.marginTop;
    /** @type {?|undefined} */
    MouseLocation.prototype.top;
}
export class ContextMenuComponent {
    /**
     * @param {?} _contextMenuService
     * @param {?} changeDetector
     * @param {?} elementRef
     * @param {?} options
     */
    constructor(_contextMenuService, changeDetector, elementRef, options) {
        this._contextMenuService = _contextMenuService;
        this.changeDetector = changeDetector;
        this.elementRef = elementRef;
        this.options = options;
        this.menuClass = "";
        this.autoFocus = false;
        this.useBootstrap4 = false;
        this.disabled = false;
        this.close = new EventEmitter();
        this.open = new EventEmitter();
        this.visibleMenuItems = [];
        this.links = [];
        this.subscription = new Subscription();
        if (options) {
            this.autoFocus = options.autoFocus;
            this.useBootstrap4 = options.useBootstrap4;
        }
        this.subscription.add(_contextMenuService.show.subscribe((/**
         * @param {?} menuEvent
         * @return {?}
         */
        menuEvent => {
            this.onMenuEvent(menuEvent);
        })));
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.subscription.unsubscribe();
    }
    /**
     * @param {?} menuEvent
     * @return {?}
     */
    onMenuEvent(menuEvent) {
        if (this.disabled) {
            return;
        }
        const { contextMenu, event, item } = menuEvent;
        if (contextMenu && contextMenu !== this) {
            return;
        }
        this.event = event;
        this.item = item;
        this.setVisibleMenuItems();
        this._contextMenuService.openContextMenu(Object.assign({}, menuEvent, { menuItems: this.visibleMenuItems, menuClass: this.menuClass }));
        this._contextMenuService.close.asObservable().pipe(first()).subscribe((/**
         * @param {?} closeEvent
         * @return {?}
         */
        closeEvent => this.close.emit(closeEvent)));
        this.open.next(menuEvent);
    }
    /**
     * @param {?} menuItem
     * @return {?}
     */
    isMenuItemVisible(menuItem) {
        return this.evaluateIfFunction(menuItem.visible);
    }
    /**
     * @return {?}
     */
    setVisibleMenuItems() {
        this.visibleMenuItems = this.menuItems.filter((/**
         * @param {?} menuItem
         * @return {?}
         */
        menuItem => this.isMenuItemVisible(menuItem)));
    }
    /**
     * @param {?} value
     * @return {?}
     */
    evaluateIfFunction(value) {
        if (value instanceof Function) {
            return value(this.item);
        }
        return value;
    }
}
ContextMenuComponent.decorators = [
    { type: Component, args: [{
                encapsulation: ViewEncapsulation.None,
                selector: 'context-menu',
                template: ` `,
                styles: [`
    .cdk-overlay-container {
      position: fixed;
      z-index: 1000;
      pointer-events: none;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
    }
    .ngx-contextmenu.cdk-overlay-pane {
      position: absolute;
      pointer-events: auto;
      box-sizing: border-box;
    }
  `]
            }] }
];
/** @nocollapse */
ContextMenuComponent.ctorParameters = () => [
    { type: ContextMenuService },
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [CONTEXT_MENU_OPTIONS,] }] }
];
ContextMenuComponent.propDecorators = {
    menuClass: [{ type: Input }],
    autoFocus: [{ type: Input }],
    useBootstrap4: [{ type: Input }],
    disabled: [{ type: Input }],
    close: [{ type: Output }],
    open: [{ type: Output }],
    menuItems: [{ type: ContentChildren, args: [ContextMenuItemDirective,] }],
    menuElement: [{ type: ViewChild, args: ['menu', { static: false },] }]
};
if (false) {
    /** @type {?} */
    ContextMenuComponent.prototype.menuClass;
    /** @type {?} */
    ContextMenuComponent.prototype.autoFocus;
    /** @type {?} */
    ContextMenuComponent.prototype.useBootstrap4;
    /** @type {?} */
    ContextMenuComponent.prototype.disabled;
    /** @type {?} */
    ContextMenuComponent.prototype.close;
    /** @type {?} */
    ContextMenuComponent.prototype.open;
    /** @type {?} */
    ContextMenuComponent.prototype.menuItems;
    /** @type {?} */
    ContextMenuComponent.prototype.menuElement;
    /** @type {?} */
    ContextMenuComponent.prototype.visibleMenuItems;
    /** @type {?} */
    ContextMenuComponent.prototype.links;
    /** @type {?} */
    ContextMenuComponent.prototype.item;
    /** @type {?} */
    ContextMenuComponent.prototype.event;
    /**
     * @type {?}
     * @private
     */
    ContextMenuComponent.prototype.subscription;
    /**
     * @type {?}
     * @private
     */
    ContextMenuComponent.prototype._contextMenuService;
    /**
     * @type {?}
     * @private
     */
    ContextMenuComponent.prototype.changeDetector;
    /**
     * @type {?}
     * @private
     */
    ContextMenuComponent.prototype.elementRef;
    /**
     * @type {?}
     * @private
     */
    ContextMenuComponent.prototype.options;
}
//# sourceMappingURL=data:application/json;base64,