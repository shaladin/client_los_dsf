/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { NgModule, InjectionToken } from '@angular/core';
import { CommonModule } from '@angular/common';
import { NgxIndexedDBService } from './ngx-indexed-db.service';
import { CreateObjectStore } from './ngx-indexed-db';
/**
 * @record
 */
export function DBConfig() { }
if (false) {
    /** @type {?} */
    DBConfig.prototype.name;
    /** @type {?} */
    DBConfig.prototype.version;
    /** @type {?} */
    DBConfig.prototype.objectStoresMeta;
}
/**
 * @record
 */
export function ObjectStoreMeta() { }
if (false) {
    /** @type {?} */
    ObjectStoreMeta.prototype.store;
    /** @type {?} */
    ObjectStoreMeta.prototype.storeConfig;
    /** @type {?} */
    ObjectStoreMeta.prototype.storeSchema;
}
/**
 * @record
 */
export function ObjectStoreSchema() { }
if (false) {
    /** @type {?} */
    ObjectStoreSchema.prototype.name;
    /** @type {?} */
    ObjectStoreSchema.prototype.keypath;
    /** @type {?} */
    ObjectStoreSchema.prototype.options;
}
/** @type {?} */
export var CONFIG_TOKEN = new InjectionToken(null);
var NgxIndexedDBModule = /** @class */ (function () {
    function NgxIndexedDBModule() {
    }
    /**
     * @param {?} dbConfig
     * @return {?}
     */
    NgxIndexedDBModule.forRoot = /**
     * @param {?} dbConfig
     * @return {?}
     */
    function (dbConfig) {
        if (!dbConfig.name) {
            throw new Error('NgxIndexedDB: Please, provide the dbName in the configuration');
        }
        if (!dbConfig.version) {
            throw new Error('NgxIndexedDB: Please, provide the db version in the configuration');
        }
        CreateObjectStore(dbConfig.name, dbConfig.version, dbConfig.objectStoresMeta);
        return {
            ngModule: NgxIndexedDBModule,
            providers: [NgxIndexedDBService, { provide: CONFIG_TOKEN, useValue: dbConfig }]
        };
    };
    NgxIndexedDBModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [],
                    imports: [CommonModule]
                },] }
    ];
    return NgxIndexedDBModule;
}());
export { NgxIndexedDBModule };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4aW5kZXhlZGRiLm1vZHVsZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25neC1pbmRleGVkLWRiLyIsInNvdXJjZXMiOlsibGliL25neGluZGV4ZWRkYi5tb2R1bGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxRQUFRLEVBQXVCLGNBQWMsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUM5RSxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDL0MsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFDL0QsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sa0JBQWtCLENBQUM7Ozs7QUFFckQsOEJBSUM7OztJQUhBLHdCQUFhOztJQUNiLDJCQUFnQjs7SUFDaEIsb0NBQW9DOzs7OztBQUdyQyxxQ0FJQzs7O0lBSEEsZ0NBQWM7O0lBQ2Qsc0NBQTZFOztJQUM3RSxzQ0FBaUM7Ozs7O0FBR2xDLHVDQUlDOzs7SUFIQSxpQ0FBYTs7SUFDYixvQ0FBZ0I7O0lBQ2hCLG9DQUFpRDs7O0FBR2xELE1BQU0sS0FBTyxZQUFZLEdBQUcsSUFBSSxjQUFjLENBQVcsSUFBSSxDQUFDO0FBRTlEO0lBQUE7SUFvQkEsQ0FBQzs7Ozs7SUFmTywwQkFBTzs7OztJQUFkLFVBQWUsUUFBa0I7UUFDaEMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUU7WUFDbkIsTUFBTSxJQUFJLEtBQUssQ0FBQywrREFBK0QsQ0FBQyxDQUFDO1NBQ2pGO1FBQ0QsSUFBSSxDQUFDLFFBQVEsQ0FBQyxPQUFPLEVBQUU7WUFDdEIsTUFBTSxJQUFJLEtBQUssQ0FBQyxtRUFBbUUsQ0FBQyxDQUFDO1NBQ3JGO1FBRUQsaUJBQWlCLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxRQUFRLENBQUMsT0FBTyxFQUFFLFFBQVEsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO1FBRTlFLE9BQU87WUFDTixRQUFRLEVBQUUsa0JBQWtCO1lBQzVCLFNBQVMsRUFBRSxDQUFDLG1CQUFtQixFQUFFLEVBQUUsT0FBTyxFQUFFLFlBQVksRUFBRSxRQUFRLEVBQUUsUUFBUSxFQUFFLENBQUM7U0FDL0UsQ0FBQztJQUNILENBQUM7O2dCQW5CRCxRQUFRLFNBQUM7b0JBQ1QsWUFBWSxFQUFFLEVBQUU7b0JBQ2hCLE9BQU8sRUFBRSxDQUFDLFlBQVksQ0FBQztpQkFDdkI7O0lBaUJELHlCQUFDO0NBQUEsQUFwQkQsSUFvQkM7U0FoQlksa0JBQWtCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTmdNb2R1bGUsIE1vZHVsZVdpdGhQcm92aWRlcnMsIEluamVjdGlvblRva2VuIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDb21tb25Nb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuaW1wb3J0IHsgTmd4SW5kZXhlZERCU2VydmljZSB9IGZyb20gJy4vbmd4LWluZGV4ZWQtZGIuc2VydmljZSc7XG5pbXBvcnQgeyBDcmVhdGVPYmplY3RTdG9yZSB9IGZyb20gJy4vbmd4LWluZGV4ZWQtZGInO1xuXG5leHBvcnQgaW50ZXJmYWNlIERCQ29uZmlnIHtcblx0bmFtZTogc3RyaW5nO1xuXHR2ZXJzaW9uOiBudW1iZXI7XG5cdG9iamVjdFN0b3Jlc01ldGE6IE9iamVjdFN0b3JlTWV0YVtdO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIE9iamVjdFN0b3JlTWV0YSB7XG5cdHN0b3JlOiBzdHJpbmc7XG5cdHN0b3JlQ29uZmlnOiB7IGtleVBhdGg6IHN0cmluZzsgYXV0b0luY3JlbWVudDogYm9vbGVhbjsgW2tleTogc3RyaW5nXTogYW55IH07XG5cdHN0b3JlU2NoZW1hOiBPYmplY3RTdG9yZVNjaGVtYVtdO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIE9iamVjdFN0b3JlU2NoZW1hIHtcblx0bmFtZTogc3RyaW5nO1xuXHRrZXlwYXRoOiBzdHJpbmc7XG5cdG9wdGlvbnM6IHsgdW5pcXVlOiBib29sZWFuOyBba2V5OiBzdHJpbmddOiBhbnkgfTtcbn1cblxuZXhwb3J0IGNvbnN0IENPTkZJR19UT0tFTiA9IG5ldyBJbmplY3Rpb25Ub2tlbjxEQkNvbmZpZz4obnVsbCk7XG5cbkBOZ01vZHVsZSh7XG5cdGRlY2xhcmF0aW9uczogW10sXG5cdGltcG9ydHM6IFtDb21tb25Nb2R1bGVdXG59KVxuZXhwb3J0IGNsYXNzIE5neEluZGV4ZWREQk1vZHVsZSB7XG5cdHN0YXRpYyBmb3JSb290KGRiQ29uZmlnOiBEQkNvbmZpZyk6IE1vZHVsZVdpdGhQcm92aWRlcnMge1xuXHRcdGlmICghZGJDb25maWcubmFtZSkge1xuXHRcdFx0dGhyb3cgbmV3IEVycm9yKCdOZ3hJbmRleGVkREI6IFBsZWFzZSwgcHJvdmlkZSB0aGUgZGJOYW1lIGluIHRoZSBjb25maWd1cmF0aW9uJyk7XG5cdFx0fVxuXHRcdGlmICghZGJDb25maWcudmVyc2lvbikge1xuXHRcdFx0dGhyb3cgbmV3IEVycm9yKCdOZ3hJbmRleGVkREI6IFBsZWFzZSwgcHJvdmlkZSB0aGUgZGIgdmVyc2lvbiBpbiB0aGUgY29uZmlndXJhdGlvbicpO1xuXHRcdH1cblxuXHRcdENyZWF0ZU9iamVjdFN0b3JlKGRiQ29uZmlnLm5hbWUsIGRiQ29uZmlnLnZlcnNpb24sIGRiQ29uZmlnLm9iamVjdFN0b3Jlc01ldGEpO1xuXG5cdFx0cmV0dXJuIHtcblx0XHRcdG5nTW9kdWxlOiBOZ3hJbmRleGVkREJNb2R1bGUsXG5cdFx0XHRwcm92aWRlcnM6IFtOZ3hJbmRleGVkREJTZXJ2aWNlLCB7IHByb3ZpZGU6IENPTkZJR19UT0tFTiwgdXNlVmFsdWU6IGRiQ29uZmlnIH1dXG5cdFx0fTtcblx0fVxufVxuIl19