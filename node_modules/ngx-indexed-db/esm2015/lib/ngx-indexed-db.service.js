/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, Inject } from '@angular/core';
import { CONFIG_TOKEN } from './ngxindexeddb.module';
import { openDatabase, DBMode } from './ngx-indexed-db';
import { createTransaction, optionsGenerator, validateBeforeTransaction } from '../utils';
export class NgxIndexedDBService {
    /**
     * @param {?} dbConfig
     */
    constructor(dbConfig) {
        this.dbConfig = dbConfig;
    }
    /**
     * @param {?} _currentStore
     * @return {?}
     */
    set currentStore(_currentStore) {
        this._currentStore = _currentStore;
    }
    /**
     * @template T
     * @param {?} value
     * @param {?=} key
     * @return {?}
     */
    add(value, key) {
        return new Promise((/**
         * @param {?} resolve
         * @param {?} reject
         * @return {?}
         */
        (resolve, reject) => {
            openDatabase(this.dbConfig.name, this.dbConfig.version).then((/**
             * @param {?} db
             * @return {?}
             */
            (db) => {
                /** @type {?} */
                let transaction = createTransaction(db, optionsGenerator(DBMode.readwrite, this._currentStore, reject, resolve));
                /** @type {?} */
                let objectStore = transaction.objectStore(this._currentStore);
                /** @type {?} */
                let request = objectStore.add(value, key);
                request.onsuccess = (/**
                 * @param {?} evt
                 * @return {?}
                 */
                (evt) => {
                    key = evt.target.result;
                    resolve(key);
                });
            }));
        }));
    }
    /**
     * @template T
     * @param {?} id
     * @return {?}
     */
    getByID(id) {
        return new Promise((/**
         * @param {?} resolve
         * @param {?} reject
         * @return {?}
         */
        (resolve, reject) => {
            openDatabase(this.dbConfig.name, this.dbConfig.version).then((/**
             * @param {?} db
             * @return {?}
             */
            (db) => {
                validateBeforeTransaction(db, this._currentStore, reject);
                /** @type {?} */
                let transaction = createTransaction(db, optionsGenerator(DBMode.readonly, this._currentStore, reject, resolve));
                /** @type {?} */
                let objectStore = transaction.objectStore(this._currentStore);
                /** @type {?} */
                let request;
                request = objectStore.get(+id);
                request.onsuccess = (/**
                 * @param {?} event
                 * @return {?}
                 */
                function (event) {
                    resolve((/** @type {?} */ (((/** @type {?} */ (event.target))).result)));
                });
            }));
        }));
    }
    /**
     * @template T
     * @return {?}
     */
    getAll() {
        return new Promise((/**
         * @param {?} resolve
         * @param {?} reject
         * @return {?}
         */
        (resolve, reject) => {
            openDatabase(this.dbConfig.name, this.dbConfig.version).then((/**
             * @param {?} db
             * @return {?}
             */
            db => {
                validateBeforeTransaction(db, this._currentStore, reject);
                /** @type {?} */
                let transaction = createTransaction(db, optionsGenerator(DBMode.readonly, this._currentStore, reject, resolve));
                /** @type {?} */
                let objectStore = transaction.objectStore(this._currentStore);
                /** @type {?} */
                let result = [];
                /** @type {?} */
                const request = objectStore.getAll();
                request.onerror = (/**
                 * @param {?} e
                 * @return {?}
                 */
                function (e) {
                    reject(e);
                });
                request.onsuccess = (/**
                 * @param {?} __0
                 * @return {?}
                 */
                function ({ target: { successResult } }) {
                    resolve((/** @type {?} */ (successResult)));
                });
            }));
        }));
    }
    /**
     * @template T
     * @param {?} value
     * @param {?=} key
     * @return {?}
     */
    update(value, key) {
        return new Promise((/**
         * @param {?} resolve
         * @param {?} reject
         * @return {?}
         */
        (resolve, reject) => {
            openDatabase(this.dbConfig.name, this.dbConfig.version).then((/**
             * @param {?} db
             * @return {?}
             */
            db => {
                validateBeforeTransaction(db, this._currentStore, reject);
                /** @type {?} */
                let transaction = createTransaction(db, optionsGenerator(DBMode.readwrite, this._currentStore, reject, resolve));
                /** @type {?} */
                let objectStore = transaction.objectStore(this._currentStore);
                transaction.oncomplete = (/**
                 * @param {?} event
                 * @return {?}
                 */
                event => {
                    resolve(event);
                });
                objectStore.put(value, key);
            }));
        }));
    }
    /**
     * @param {?} key
     * @return {?}
     */
    deleteRecord(key) {
        return new Promise((/**
         * @param {?} resolve
         * @param {?} reject
         * @return {?}
         */
        (resolve, reject) => {
            openDatabase(this.dbConfig.name, this.dbConfig.version).then((/**
             * @param {?} db
             * @return {?}
             */
            db => {
                validateBeforeTransaction(db, this._currentStore, reject);
                /** @type {?} */
                let transaction = createTransaction(db, optionsGenerator(DBMode.readwrite, this._currentStore, reject, resolve));
                /** @type {?} */
                let objectStore = transaction.objectStore(this._currentStore);
                /** @type {?} */
                let request = objectStore.delete(key);
                request.onsuccess = (/**
                 * @param {?} event
                 * @return {?}
                 */
                event => {
                    resolve(event);
                });
            }));
        }));
    }
    /**
     * @return {?}
     */
    clear() {
        return new Promise((/**
         * @param {?} resolve
         * @param {?} reject
         * @return {?}
         */
        (resolve, reject) => {
            openDatabase(this.dbConfig.name, this.dbConfig.version).then((/**
             * @param {?} db
             * @return {?}
             */
            db => {
                validateBeforeTransaction(db, this._currentStore, reject);
                /** @type {?} */
                let transaction = createTransaction(db, optionsGenerator(DBMode.readwrite, this._currentStore, reject, resolve));
                /** @type {?} */
                let objectStore = transaction.objectStore(this._currentStore);
                objectStore.clear();
                transaction.oncomplete = (/**
                 * @param {?} event
                 * @return {?}
                 */
                event => {
                    resolve();
                });
            }));
        }));
    }
    /**
     * @param {?} cursorCallback
     * @param {?=} keyRange
     * @return {?}
     */
    openCursor(cursorCallback, keyRange) {
        return new Promise((/**
         * @param {?} resolve
         * @param {?} reject
         * @return {?}
         */
        (resolve, reject) => {
            openDatabase(this.dbConfig.name, this.dbConfig.version).then((/**
             * @param {?} db
             * @return {?}
             */
            db => {
                validateBeforeTransaction(db, this._currentStore, reject);
                /** @type {?} */
                let transaction = createTransaction(db, optionsGenerator(DBMode.readonly, this._currentStore, reject, resolve));
                /** @type {?} */
                let objectStore = transaction.objectStore(this._currentStore);
                /** @type {?} */
                let request = objectStore.openCursor(keyRange);
                request.onsuccess = (/**
                 * @param {?} event
                 * @return {?}
                 */
                (event) => {
                    cursorCallback(event);
                    resolve();
                });
            }));
        }));
    }
    /**
     * @param {?} indexName
     * @param {?} key
     * @return {?}
     */
    getByIndex(indexName, key) {
        return new Promise((/**
         * @param {?} resolve
         * @param {?} reject
         * @return {?}
         */
        (resolve, reject) => {
            openDatabase(this.dbConfig.name, this.dbConfig.version).then((/**
             * @param {?} db
             * @return {?}
             */
            db => {
                validateBeforeTransaction(db, this._currentStore, reject);
                /** @type {?} */
                let transaction = createTransaction(db, optionsGenerator(DBMode.readonly, this._currentStore, reject, resolve));
                /** @type {?} */
                let objectStore = transaction.objectStore(this._currentStore);
                /** @type {?} */
                let index = objectStore.index(indexName);
                /** @type {?} */
                let request = index.get(key);
                request.onsuccess = (/**
                 * @param {?} event
                 * @return {?}
                 */
                (event) => {
                    resolve(((/** @type {?} */ (event.target))).result);
                });
            }));
        }));
    }
}
NgxIndexedDBService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
NgxIndexedDBService.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [CONFIG_TOKEN,] }] }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    NgxIndexedDBService.prototype._currentStore;
    /**
     * @type {?}
     * @private
     */
    NgxIndexedDBService.prototype.dbConfig;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LWluZGV4ZWQtZGIuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25neC1pbmRleGVkLWRiLyIsInNvdXJjZXMiOlsibGliL25neC1pbmRleGVkLWRiLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ25ELE9BQU8sRUFBRSxZQUFZLEVBQVksTUFBTSx1QkFBdUIsQ0FBQztBQUMvRCxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sRUFBTyxNQUFNLGtCQUFrQixDQUFDO0FBQzdELE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxnQkFBZ0IsRUFBRSx5QkFBeUIsRUFBRSxNQUFNLFVBQVUsQ0FBQztBQUcxRixNQUFNLE9BQU8sbUJBQW1COzs7O0lBTS9CLFlBQTBDLFFBQWtCO1FBQWxCLGFBQVEsR0FBUixRQUFRLENBQVU7SUFBRyxDQUFDOzs7OztJQUxoRSxJQUFJLFlBQVksQ0FBQyxhQUFxQjtRQUNyQyxJQUFJLENBQUMsYUFBYSxHQUFHLGFBQWEsQ0FBQztJQUNwQyxDQUFDOzs7Ozs7O0lBS0QsR0FBRyxDQUFJLEtBQVEsRUFBRSxHQUFTO1FBQ3pCLE9BQU8sSUFBSSxPQUFPOzs7OztRQUFTLENBQUMsT0FBTyxFQUFFLE1BQU0sRUFBRSxFQUFFO1lBQzlDLFlBQVksQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxDQUFDLElBQUk7Ozs7WUFBQyxDQUFDLEVBQWUsRUFBRSxFQUFFOztvQkFDNUUsV0FBVyxHQUFHLGlCQUFpQixDQUNqQyxFQUFFLEVBQ0YsZ0JBQWdCLENBQUMsTUFBTSxDQUFDLFNBQVMsRUFBRSxJQUFJLENBQUMsYUFBYSxFQUFFLE1BQU0sRUFBRSxPQUFPLENBQUMsQ0FDdkU7O29CQUNELFdBQVcsR0FBRyxXQUFXLENBQUMsV0FBVyxDQUFDLElBQUksQ0FB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Q0FBQyxFQUFFLEVBQUUsSUFBSSxDQUFDLGFBQWEsRUFBRSxNQUFNLENBQUMsQ0FBQzs7b0JBQ3RELFdBQVcsR0FBRyxpQkFBaUIsQ0FDakMsRUFBRSxFQUNGLGdCQUFnQixDQUFDLE1BQU0sQ0FBQyxRQUFRLEVBQUUsSUFBSSxDQUFDLGFBQWEsRUFBRSxNQUFNLEVBQUUsT0FBTyxDQUFDLENBQ3RFOztvQkFDRCxXQUFXLEdBQUcsV0FBVyxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDOztvQkFDekQsS0FBSyxHQUFHLFdBQVcsQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDOztvQkFDcEMsT0FBTyxHQUFHLEtBQUssQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDO2dCQUN6QixPQUFPLENBQUMsU0FBUzs7OztnQkFBRyxDQUFDLEtBQVksRUFBRSxFQUFFO29CQUNwQyxPQUFPLENBQUMsQ0FBQyxtQkFBa0IsS0FBSyxDQUFDLE1BQU0sRUFBQSxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUM7Z0JBQ2xELENBQUMsQ0FBQSxDQUFDO1lBQ0gsQ0FBQyxFQUFDLENBQUM7UUFDSixDQUFDLEVBQUMsQ0FBQztJQUNKLENBQUM7OztZQXpKRCxVQUFVOzs7OzRDQU9HLE1BQU0sU0FBQyxZQUFZOzs7Ozs7O0lBRmhDLDRDQUE4Qjs7Ozs7SUFFbEIsdUNBQWdEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSwgSW5qZWN0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDT05GSUdfVE9LRU4sIERCQ29uZmlnIH0gZnJvbSAnLi9uZ3hpbmRleGVkZGIubW9kdWxlJztcbmltcG9ydCB7IG9wZW5EYXRhYmFzZSwgREJNb2RlLCBLZXkgfSBmcm9tICcuL25neC1pbmRleGVkLWRiJztcbmltcG9ydCB7IGNyZWF0ZVRyYW5zYWN0aW9uLCBvcHRpb25zR2VuZXJhdG9yLCB2YWxpZGF0ZUJlZm9yZVRyYW5zYWN0aW9uIH0gZnJvbSAnLi4vdXRpbHMnO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgTmd4SW5kZXhlZERCU2VydmljZSB7XG5cdHNldCBjdXJyZW50U3RvcmUoX2N1cnJlbnRTdG9yZTogc3RyaW5nKSB7XG5cdFx0dGhpcy5fY3VycmVudFN0b3JlID0gX2N1cnJlbnRTdG9yZTtcblx0fVxuXHRwcml2YXRlIF9jdXJyZW50U3RvcmU6IHN0cmluZztcblxuXHRjb25zdHJ1Y3RvcihASW5qZWN0KENPTkZJR19UT0tFTikgcHJpdmF0ZSBkYkNvbmZpZzogREJDb25maWcpIHt9XG5cblx0YWRkPFQ+KHZhbHVlOiBULCBrZXk/OiBhbnkpIHtcblx0XHRyZXR1cm4gbmV3IFByb21pc2U8bnVtYmVyPigocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG5cdFx0XHRvcGVuRGF0YWJhc2UodGhpcy5kYkNvbmZpZy5uYW1lLCB0aGlzLmRiQ29uZmlnLnZlcnNpb24pLnRoZW4oKGRiOiBJREJEYXRhYmFzZSkgPT4ge1xuXHRcdFx0XHRsZXQgdHJhbnNhY3Rpb24gPSBjcmVhdGVUcmFuc2FjdGlvbihcblx0XHRcdFx0XHRcdGRiLFxuXHRcdFx0XHRcdFx0b3B0aW9uc0dlbmVyYXRvcihEQk1vZGUucmVhZHdyaXRlLCB0aGlzLl9jdXJyZW50U3RvcmUsIHJlamVjdCwgcmVzb2x2ZSlcblx0XHRcdFx0XHQpLFxuXHRcdFx0XHRcdG9iamVjdFN0b3JlID0gdHJhbnNhY3Rpb24ub2JqZWN0U3RvcmUodGhpcy5fY3VycmVudFN0b3JlKTtcblx0XHRcdFx0bGV0IHJlcXVlc3QgPSBvYmplY3RTdG9yZS5hZGQodmFsdWUsIGtleSk7XG5cdFx0XHRcdHJlcXVlc3Qub25zdWNjZXNzID0gKGV2dDogYW55KSA9PiB7XG5cdFx0XHRcdFx0a2V5ID0gZXZ0LnRhcmdldC5yZXN1bHQ7XG5cdFx0XHRcdFx0cmVzb2x2ZShrZXkpO1xuXHRcdFx0XHR9O1xuXHRcdFx0fSk7XG5cdFx0fSk7XG5cdH1cblxuXHRnZXRCeUlEPFQ+KGlkOiBzdHJpbmcgfCBudW1iZXIpIHtcblx0XHRyZXR1cm4gbmV3IFByb21pc2U8VD4oKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuXHRcdFx0b3BlbkRhdGFiYXNlKHRoaXMuZGJDb25maWcubmFtZSwgdGhpcy5kYkNvbmZpZy52ZXJzaW9uKS50aGVuKChkYjogSURCRGF0YWJhc2UpID0+IHtcblx0XHRcdFx0dmFsaWRhdGVCZWZvcmVUcmFuc2FjdGlvbihkYiwgdGhpcy5fY3VycmVudFN0b3JlLCByZWplY3QpO1xuXHRcdFx0XHRsZXQgdHJhbnNhY3Rpb24gPSBjcmVhdGVUcmFuc2FjdGlvbihcblx0XHRcdFx0XHRcdGRiLFxuXHRcdFx0XHRcdFx0b3B0aW9uc0dlbmVyYXRvcihEQk1vZGUucmVhZG9ubHksIHRoaXMuX2N1cnJlbnRTdG9yZSwgcmVqZWN0LCByZXNvbHZlKVxuXHRcdFx0XHRcdCksXG5cdFx0XHRcdFx0b2JqZWN0U3RvcmUgPSB0cmFuc2FjdGlvbi5vYmplY3RTdG9yZSh0aGlzLl9jdXJyZW50U3RvcmUpLFxuXHRcdFx0XHRcdHJlcXVlc3Q6IElEQlJlcXVlc3Q7XG5cdFx0XHRcdHJlcXVlc3QgPSBvYmplY3RTdG9yZS5nZXQoK2lkKTtcblx0XHRcdFx0cmVxdWVzdC5vbnN1Y2Nlc3MgPSBmdW5jdGlvbihldmVudDogRXZlbnQpIHtcblx0XHRcdFx0XHRyZXNvbHZlKChldmVudC50YXJnZXQgYXMgYW55KS5yZXN1bHQgYXMgVCk7XG5cdFx0XHRcdH07XG5cdFx0XHR9KTtcblx0XHR9KTtcblx0fVxuXG5cdGdldEFsbDxUPigpIHtcblx0XHRyZXR1cm4gbmV3IFByb21pc2U8VFtdPigocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG5cdFx0XHRvcGVuRGF0YWJhc2UodGhpcy5kYkNvbmZpZy5uYW1lLCB0aGlzLmRiQ29uZmlnLnZlcnNpb24pLnRoZW4oZGIgPT4ge1xuXHRcdFx0XHR2YWxpZGF0ZUJlZm9yZVRyYW5zYWN0aW9uKGRiLCB0aGlzLl9jdXJyZW50U3RvcmUsIHJlamVjdCk7XG5cdFx0XHRcdGxldCB0cmFuc2FjdGlvbiA9IGNyZWF0ZVRyYW5zYWN0aW9uKFxuXHRcdFx0XHRcdFx0ZGIsXG5cdFx0XHRcdFx0XHRvcHRpb25zR2VuZXJhdG9yKERCTW9kZS5yZWFkb25seSwgdGhpcy5fY3VycmVudFN0b3JlLCByZWplY3QsIHJlc29sdmUpXG5cdFx0XHRcdFx0KSxcblx0XHRcdFx0XHRvYmplY3RTdG9yZSA9IHRyYW5zYWN0aW9uLm9iamVjdFN0b3JlKHRoaXMuX2N1cnJlbnRTdG9yZSksXG5cdFx0XHRcdFx0cmVzdWx0OiBBcnJheTxhbnk+ID0gW107XG5cblx0XHRcdFx0Y29uc3QgcmVxdWVzdDogSURCUmVxdWVzdCA9IG9iamVjdFN0b3JlLmdldEFsbCgpO1xuXG5cdFx0XHRcdHJlcXVlc3Qub25lcnJvciA9IGZ1bmN0aW9uKGUpIHtcblx0XHRcdFx0XHRyZWplY3QoZSk7XG5cdFx0XHRcdH07XG5cdFx0XHRcdHJlcXVlc3Qub25zdWNjZXNzID0gZnVuY3Rpb24oeyB0YXJnZXQ6IHsgc3VjY2Vzc1Jlc3VsdCB9IH06IGFueSkge1xuXHRcdFx0XHRcdHJlc29sdmUoc3VjY2Vzc1Jlc3VsdCBhcyBUW10pO1xuXHRcdFx0XHR9O1xuXHRcdFx0fSk7XG5cdFx0fSk7XG5cdH1cblxuXHR1cGRhdGU8VD4odmFsdWU6IFQsIGtleT86IGFueSkge1xuXHRcdHJldHVybiBuZXcgUHJvbWlzZTxhbnk+KChyZXNvbHZlLCByZWplY3QpID0+IHtcblx0XHRcdG9wZW5EYXRhYmFzZSh0aGlzLmRiQ29uZmlnLm5hbWUsIHRoaXMuZGJDb25maWcudmVyc2lvbikudGhlbihkYiA9PiB7XG5cdFx0XHRcdHZhbGlkYXRlQmVmb3JlVHJhbnNhY3Rpb24oZGIsIHRoaXMuX2N1cnJlbnRTdG9yZSwgcmVqZWN0KTtcblx0XHRcdFx0bGV0IHRyYW5zYWN0aW9uID0gY3JlYXRlVHJhbnNhY3Rpb24oXG5cdFx0XHRcdFx0XHRkYixcblx0XHRcdFx0XHRcdG9wdGlvbnNHZW5lcmF0b3IoREJNb2RlLnJlYWR3cml0ZSwgdGhpcy5fY3VycmVudFN0b3JlLCByZWplY3QsIHJlc29sdmUpXG5cdFx0XHRcdFx0KSxcblx0XHRcdFx0XHRvYmplY3RTdG9yZSA9IHRyYW5zYWN0aW9uLm9iamVjdFN0b3JlKHRoaXMuX2N1cnJlbnRTdG9yZSk7XG5cdFx0XHRcdHRyYW5zYWN0aW9uLm9uY29tcGxldGUgPSBldmVudCA9PiB7XG5cdFx0XHRcdFx0cmVzb2x2ZShldmVudCk7XG5cdFx0XHRcdH07XG5cdFx0XHRcdG9iamVjdFN0b3JlLnB1dCh2YWx1ZSwga2V5KTtcblx0XHRcdH0pO1xuXHRcdH0pO1xuXHR9XG5cblx0ZGVsZXRlUmVjb3JkKGtleTogS2V5KSB7XG5cdFx0cmV0dXJuIG5ldyBQcm9taXNlPGFueT4oKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuXHRcdFx0b3BlbkRhdGFiYXNlKHRoaXMuZGJDb25maWcubmFtZSwgdGhpcy5kYkNvbmZpZy52ZXJzaW9uKS50aGVuKGRiID0+IHtcblx0XHRcdFx0dmFsaWRhdGVCZWZvcmVUcmFuc2FjdGlvbihkYiwgdGhpcy5fY3VycmVudFN0b3JlLCByZWplY3QpO1xuXHRcdFx0XHRsZXQgdHJhbnNhY3Rpb24gPSBjcmVhdGVUcmFuc2FjdGlvbihcblx0XHRcdFx0XHRcdGRiLFxuXHRcdFx0XHRcdFx0b3B0aW9uc0dlbmVyYXRvcihEQk1vZGUucmVhZHdyaXRlLCB0aGlzLl9jdXJyZW50U3RvcmUsIHJlamVjdCwgcmVzb2x2ZSlcblx0XHRcdFx0XHQpLFxuXHRcdFx0XHRcdG9iamVjdFN0b3JlID0gdHJhbnNhY3Rpb24ub2JqZWN0U3RvcmUodGhpcy5fY3VycmVudFN0b3JlKTtcblx0XHRcdFx0bGV0IHJlcXVlc3QgPSBvYmplY3RTdG9yZS5kZWxldGUoa2V5KTtcblx0XHRcdFx0cmVxdWVzdC5vbnN1Y2Nlc3MgPSBldmVudCA9PiB7XG5cdFx0XHRcdFx0cmVzb2x2ZShldmVudCk7XG5cdFx0XHRcdH07XG5cdFx0XHR9KTtcblx0XHR9KTtcblx0fVxuXG5cdGNsZWFyKCkge1xuXHRcdHJldHVybiBuZXcgUHJvbWlzZTxhbnk+KChyZXNvbHZlLCByZWplY3QpID0+IHtcblx0XHRcdG9wZW5EYXRhYmFzZSh0aGlzLmRiQ29uZmlnLm5hbWUsIHRoaXMuZGJDb25maWcudmVyc2lvbikudGhlbihkYiA9PiB7XG5cdFx0XHRcdHZhbGlkYXRlQmVmb3JlVHJhbnNhY3Rpb24oZGIsIHRoaXMuX2N1cnJlbnRTdG9yZSwgcmVqZWN0KTtcblx0XHRcdFx0bGV0IHRyYW5zYWN0aW9uID0gY3JlYXRlVHJhbnNhY3Rpb24oXG5cdFx0XHRcdFx0XHRkYixcblx0XHRcdFx0XHRcdG9wdGlvbnNHZW5lcmF0b3IoREJNb2RlLnJlYWR3cml0ZSwgdGhpcy5fY3VycmVudFN0b3JlLCByZWplY3QsIHJlc29sdmUpXG5cdFx0XHRcdFx0KSxcblx0XHRcdFx0XHRvYmplY3RTdG9yZSA9IHRyYW5zYWN0aW9uLm9iamVjdFN0b3JlKHRoaXMuX2N1cnJlbnRTdG9yZSk7XG5cdFx0XHRcdG9iamVjdFN0b3JlLmNsZWFyKCk7XG5cdFx0XHRcdHRyYW5zYWN0aW9uLm9uY29tcGxldGUgPSBldmVudCA9PiB7XG5cdFx0XHRcdFx0cmVzb2x2ZSgpO1xuXHRcdFx0XHR9O1xuXHRcdFx0fSk7XG5cdFx0fSk7XG5cdH1cblxuXHRvcGVuQ3Vyc29yKGN1cnNvckNhbGxiYWNrOiAoZXZlbnQ6IEV2ZW50KSA9PiB2b2lkLCBrZXlSYW5nZT86IElEQktleVJhbmdlKSB7XG5cdFx0cmV0dXJuIG5ldyBQcm9taXNlPHZvaWQ+KChyZXNvbHZlLCByZWplY3QpID0+IHtcblx0XHRcdG9wZW5EYXRhYmFzZSh0aGlzLmRiQ29uZmlnLm5hbWUsIHRoaXMuZGJDb25maWcudmVyc2lvbikudGhlbihkYiA9PiB7XG5cdFx0XHRcdHZhbGlkYXRlQmVmb3JlVHJhbnNhY3Rpb24oZGIsIHRoaXMuX2N1cnJlbnRTdG9yZSwgcmVqZWN0KTtcblx0XHRcdFx0bGV0IHRyYW5zYWN0aW9uID0gY3JlYXRlVHJhbnNhY3Rpb24oXG5cdFx0XHRcdFx0XHRkYixcblx0XHRcdFx0XHRcdG9wdGlvbnNHZW5lcmF0b3IoREJNb2RlLnJlYWRvbmx5LCB0aGlzLl9jdXJyZW50U3RvcmUsIHJlamVjdCwgcmVzb2x2ZSlcblx0XHRcdFx0XHQpLFxuXHRcdFx0XHRcdG9iamVjdFN0b3JlID0gdHJhbnNhY3Rpb24ub2JqZWN0U3RvcmUodGhpcy5fY3VycmVudFN0b3JlKSxcblx0XHRcdFx0XHRyZXF1ZXN0ID0gb2JqZWN0U3RvcmUub3BlbkN1cnNvcihrZXlSYW5nZSk7XG5cblx0XHRcdFx0cmVxdWVzdC5vbnN1Y2Nlc3MgPSAoZXZlbnQ6IEV2ZW50KSA9PiB7XG5cdFx0XHRcdFx0Y3Vyc29yQ2FsbGJhY2soZXZlbnQpO1xuXHRcdFx0XHRcdHJlc29sdmUoKTtcblx0XHRcdFx0fTtcblx0XHRcdH0pO1xuXHRcdH0pO1xuXHR9XG5cblx0Z2V0QnlJbmRleChpbmRleE5hbWU6IHN0cmluZywga2V5OiBhbnkpIHtcblx0XHRyZXR1cm4gbmV3IFByb21pc2U8YW55PigocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG5cdFx0XHRvcGVuRGF0YWJhc2UodGhpcy5kYkNvbmZpZy5uYW1lLCB0aGlzLmRiQ29uZmlnLnZlcnNpb24pLnRoZW4oZGIgPT4ge1xuXHRcdFx0XHR2YWxpZGF0ZUJlZm9yZVRyYW5zYWN0aW9uKGRiLCB0aGlzLl9jdXJyZW50U3RvcmUsIHJlamVjdCk7XG5cdFx0XHRcdGxldCB0cmFuc2FjdGlvbiA9IGNyZWF0ZVRyYW5zYWN0aW9uKFxuXHRcdFx0XHRcdFx0ZGIsXG5cdFx0XHRcdFx0XHRvcHRpb25zR2VuZXJhdG9yKERCTW9kZS5yZWFkb25seSwgdGhpcy5fY3VycmVudFN0b3JlLCByZWplY3QsIHJlc29sdmUpXG5cdFx0XHRcdFx0KSxcblx0XHRcdFx0XHRvYmplY3RTdG9yZSA9IHRyYW5zYWN0aW9uLm9iamVjdFN0b3JlKHRoaXMuX2N1cnJlbnRTdG9yZSksXG5cdFx0XHRcdFx0aW5kZXggPSBvYmplY3RTdG9yZS5pbmRleChpbmRleE5hbWUpLFxuXHRcdFx0XHRcdHJlcXVlc3QgPSBpbmRleC5nZXQoa2V5KTtcblx0XHRcdFx0cmVxdWVzdC5vbnN1Y2Nlc3MgPSAoZXZlbnQ6IEV2ZW50KSA9PiB7XG5cdFx0XHRcdFx0cmVzb2x2ZSgoPElEQk9wZW5EQlJlcXVlc3Q+ZXZlbnQudGFyZ2V0KS5yZXN1bHQpO1xuXHRcdFx0XHR9O1xuXHRcdFx0fSk7XG5cdFx0fSk7XG5cdH1cbn1cbiJdfQ==