/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { NgModule, InjectionToken } from '@angular/core';
import { CommonModule } from '@angular/common';
import { NgxIndexedDBService } from './ngx-indexed-db.service';
import { CreateObjectStore } from './ngx-indexed-db';
/**
 * @record
 */
export function DBConfig() { }
if (false) {
    /** @type {?} */
    DBConfig.prototype.name;
    /** @type {?} */
    DBConfig.prototype.version;
    /** @type {?} */
    DBConfig.prototype.objectStoresMeta;
}
/**
 * @record
 */
export function ObjectStoreMeta() { }
if (false) {
    /** @type {?} */
    ObjectStoreMeta.prototype.store;
    /** @type {?} */
    ObjectStoreMeta.prototype.storeConfig;
    /** @type {?} */
    ObjectStoreMeta.prototype.storeSchema;
}
/**
 * @record
 */
export function ObjectStoreSchema() { }
if (false) {
    /** @type {?} */
    ObjectStoreSchema.prototype.name;
    /** @type {?} */
    ObjectStoreSchema.prototype.keypath;
    /** @type {?} */
    ObjectStoreSchema.prototype.options;
}
/** @type {?} */
export const CONFIG_TOKEN = new InjectionToken(null);
export class NgxIndexedDBModule {
    /**
     * @param {?} dbConfig
     * @return {?}
     */
    static forRoot(dbConfig) {
        if (!dbConfig.name) {
            throw new Error('NgxIndexedDB: Please, provide the dbName in the configuration');
        }
        if (!dbConfig.version) {
            throw new Error('NgxIndexedDB: Please, provide the db version in the configuration');
        }
        CreateObjectStore(dbConfig.name, dbConfig.version, dbConfig.objectStoresMeta);
        return {
            ngModule: NgxIndexedDBModule,
            providers: [NgxIndexedDBService, { provide: CONFIG_TOKEN, useValue: dbConfig }]
        };
    }
}
NgxIndexedDBModule.decorators = [
    { type: NgModule, args: [{
                declarations: [],
                imports: [CommonModule]
            },] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4aW5kZXhlZGRiLm1vZHVsZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25neC1pbmRleGVkLWRiLyIsInNvdXJjZXMiOlsibGliL25neGluZGV4ZWRkYi5tb2R1bGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxRQUFRLEVBQXVCLGNBQWMsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUM5RSxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDL0MsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFDL0QsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sa0JBQWtCLENBQUM7Ozs7QUFFckQsOEJBSUM7OztJQUhBLHdCQUFhOztJQUNiLDJCQUFnQjs7SUFDaEIsb0NBQW9DOzs7OztBQUdyQyxxQ0FJQzs7O0lBSEEsZ0NBQWM7O0lBQ2Qsc0NBQTZFOztJQUM3RSxzQ0FBaUM7Ozs7O0FBR2xDLHVDQUlDOzs7SUFIQSxpQ0FBYTs7SUFDYixvQ0FBZ0I7O0lBQ2hCLG9DQUFpRDs7O0FBR2xELE1BQU0sT0FBTyxZQUFZLEdBQUcsSUFBSSxjQUFjLENBQVcsSUFBSSxDQUFDO0FBTTlELE1BQU0sT0FBTyxrQkFBa0I7Ozs7O0lBQzlCLE1BQU0sQ0FBQyxPQUFPLENBQUMsUUFBa0I7UUFDaEMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUU7WUFDbkIsTUFBTSxJQUFJLEtBQUssQ0FBQywrREFBK0QsQ0FBQyxDQUFDO1NBQ2pGO1FBQ0QsSUFBSSxDQUFDLFFBQVEsQ0FBQyxPQUFPLEVBQUU7WUFDdEIsTUFBTSxJQUFJLEtBQUssQ0FBQyxtRUFBbUUsQ0FBQyxDQUFDO1NBQ3JGO1FBRUQsaUJBQWlCLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxRQUFRLENBQUMsT0FBTyxFQUFFLFFBQVEsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO1FBRTlFLE9BQU87WUFDTixRQUFRLEVBQUUsa0JBQWtCO1lBQzVCLFNBQVMsRUFBRSxDQUFDLG1CQUFtQixFQUFFLEVBQUUsT0FBTyxFQUFFLFlBQVksRUFBRSxRQUFRLEVBQUUsUUFBUSxFQUFFLENBQUM7U0FDL0UsQ0FBQztJQUNILENBQUM7OztZQW5CRCxRQUFRLFNBQUM7Z0JBQ1QsWUFBWSxFQUFFLEVBQUU7Z0JBQ2hCLE9BQU8sRUFBRSxDQUFDLFlBQVksQ0FBQzthQUN2QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5nTW9kdWxlLCBNb2R1bGVXaXRoUHJvdmlkZXJzLCBJbmplY3Rpb25Ub2tlbiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ29tbW9uTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcbmltcG9ydCB7IE5neEluZGV4ZWREQlNlcnZpY2UgfSBmcm9tICcuL25neC1pbmRleGVkLWRiLnNlcnZpY2UnO1xuaW1wb3J0IHsgQ3JlYXRlT2JqZWN0U3RvcmUgfSBmcm9tICcuL25neC1pbmRleGVkLWRiJztcblxuZXhwb3J0IGludGVyZmFjZSBEQkNvbmZpZyB7XG5cdG5hbWU6IHN0cmluZztcblx0dmVyc2lvbjogbnVtYmVyO1xuXHRvYmplY3RTdG9yZXNNZXRhOiBPYmplY3RTdG9yZU1ldGFbXTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBPYmplY3RTdG9yZU1ldGEge1xuXHRzdG9yZTogc3RyaW5nO1xuXHRzdG9yZUNvbmZpZzogeyBrZXlQYXRoOiBzdHJpbmc7IGF1dG9JbmNyZW1lbnQ6IGJvb2xlYW47IFtrZXk6IHN0cmluZ106IGFueSB9O1xuXHRzdG9yZVNjaGVtYTogT2JqZWN0U3RvcmVTY2hlbWFbXTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBPYmplY3RTdG9yZVNjaGVtYSB7XG5cdG5hbWU6IHN0cmluZztcblx0a2V5cGF0aDogc3RyaW5nO1xuXHRvcHRpb25zOiB7IHVuaXF1ZTogYm9vbGVhbjsgW2tleTogc3RyaW5nXTogYW55IH07XG59XG5cbmV4cG9ydCBjb25zdCBDT05GSUdfVE9LRU4gPSBuZXcgSW5qZWN0aW9uVG9rZW48REJDb25maWc+KG51bGwpO1xuXG5ATmdNb2R1bGUoe1xuXHRkZWNsYXJhdGlvbnM6IFtdLFxuXHRpbXBvcnRzOiBbQ29tbW9uTW9kdWxlXVxufSlcbmV4cG9ydCBjbGFzcyBOZ3hJbmRleGVkREJNb2R1bGUge1xuXHRzdGF0aWMgZm9yUm9vdChkYkNvbmZpZzogREJDb25maWcpOiBNb2R1bGVXaXRoUHJvdmlkZXJzIHtcblx0XHRpZiAoIWRiQ29uZmlnLm5hbWUpIHtcblx0XHRcdHRocm93IG5ldyBFcnJvcignTmd4SW5kZXhlZERCOiBQbGVhc2UsIHByb3ZpZGUgdGhlIGRiTmFtZSBpbiB0aGUgY29uZmlndXJhdGlvbicpO1xuXHRcdH1cblx0XHRpZiAoIWRiQ29uZmlnLnZlcnNpb24pIHtcblx0XHRcdHRocm93IG5ldyBFcnJvcignTmd4SW5kZXhlZERCOiBQbGVhc2UsIHByb3ZpZGUgdGhlIGRiIHZlcnNpb24gaW4gdGhlIGNvbmZpZ3VyYXRpb24nKTtcblx0XHR9XG5cblx0XHRDcmVhdGVPYmplY3RTdG9yZShkYkNvbmZpZy5uYW1lLCBkYkNvbmZpZy52ZXJzaW9uLCBkYkNvbmZpZy5vYmplY3RTdG9yZXNNZXRhKTtcblxuXHRcdHJldHVybiB7XG5cdFx0XHRuZ01vZHVsZTogTmd4SW5kZXhlZERCTW9kdWxlLFxuXHRcdFx0cHJvdmlkZXJzOiBbTmd4SW5kZXhlZERCU2VydmljZSwgeyBwcm92aWRlOiBDT05GSUdfVE9LRU4sIHVzZVZhbHVlOiBkYkNvbmZpZyB9XVxuXHRcdH07XG5cdH1cbn1cbiJdfQ==