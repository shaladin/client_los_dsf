{"version":3,"sources":["ng://ngx-indexed-db/lib/ngx-indexed-db.ts"],"names":["NgxIndexedDB","dbName","version","this","utils","Utils","dbWrapper","DbWrapper","prototype","openDatabase","upgradeCallback","_this","Promise","resolve","reject","dbVersion","request","indexedDB","open","onsuccess","e","db","result","onerror","errorCode","error","onupgradeneeded","getByKey","storeName","key","validateBeforeTransaction","createTransaction","optionsGenerator","DBMode","readonly","objectStore","get","event","getAll","keyRange","indexDetails","index","indexName","order","openCursor","evt","cursor","push","add","value","readwrite","target","count","update","put","delete","deleteDatabase","close","deleteDBRequest","onblocked","Error","cursorCallback","clear","getByIndex","window","mozIndexedDB","webkitIndexedDB","msIndexedDB","validateStoreName","objectStoreNames","contains","options","trans","transaction","dbMode","oncomplete","complete","onabort","abort","type"],"mappings":"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","sourcesContent":["export class NgxIndexedDB {\n\tutils: Utils;\n\tdbWrapper: DbWrapper;\n\n\tconstructor(dbName: string, version: number) {\n\t\tthis.utils = new Utils();\n\t\tthis.dbWrapper = new DbWrapper(dbName, version);\n\t}\n\n\topenDatabase(version: number, upgradeCallback?: Function) {\n\t\treturn new Promise<any>((resolve, reject) => {\n\t\t\tthis.dbWrapper.dbVersion = version;\n\t\t\tlet request = this.utils.indexedDB.open(this.dbWrapper.dbName, version);\n\t\t\trequest.onsuccess = e => {\n\t\t\t\tthis.dbWrapper.db = request.result;\n\t\t\t\tresolve();\n\t\t\t};\n\n\t\t\trequest.onerror = e => {\n\t\t\t\treject(\n\t\t\t\t\t'IndexedDB error: ' + (<any>e.target).errorCode\n\t\t\t\t\t\t? (<any>e.target).errorCode + ' (' + (<any>e.target).error + ')'\n\t\t\t\t\t\t: (<any>e.target).errorCode\n\t\t\t\t);\n\t\t\t};\n\n\t\t\tif (typeof upgradeCallback === 'function') {\n\t\t\t\trequest.onupgradeneeded = e => {\n\t\t\t\t\tupgradeCallback(e, this.dbWrapper.db);\n\t\t\t\t};\n\t\t\t}\n\t\t});\n\t}\n\n\tgetByKey(storeName: string, key: any) {\n\t\treturn new Promise<any>((resolve, reject) => {\n\t\t\tthis.dbWrapper.validateBeforeTransaction(storeName, reject);\n\n\t\t\tlet transaction = this.dbWrapper.createTransaction(\n\t\t\t\t\tthis.dbWrapper.optionsGenerator(DBMode.readonly, storeName, reject, resolve)\n\t\t\t\t),\n\t\t\t\tobjectStore = transaction.objectStore(storeName),\n\t\t\t\trequest: IDBRequest;\n\n\t\t\trequest = objectStore.get(key);\n\t\t\trequest.onsuccess = function(event: Event) {\n\t\t\t\tresolve((<any>event.target).result);\n\t\t\t};\n\t\t});\n\t}\n\n\tgetAll(storeName: string, keyRange?: IDBKeyRange, indexDetails?: IndexDetails) {\n\t\treturn new Promise<any>((resolve, reject) => {\n\t\t\tthis.dbWrapper.validateBeforeTransaction(storeName, reject);\n\n\t\t\tlet transaction = this.dbWrapper.createTransaction(\n\t\t\t\t\tthis.dbWrapper.optionsGenerator(DBMode.readonly, storeName, reject, resolve)\n\t\t\t\t),\n\t\t\t\tobjectStore = transaction.objectStore(storeName),\n\t\t\t\tresult: Array<any> = [],\n\t\t\t\trequest: IDBRequest;\n\t\t\tif (indexDetails) {\n\t\t\t\tlet index = objectStore.index(indexDetails.indexName),\n\t\t\t\t\torder = indexDetails.order === 'desc' ? 'prev' : 'next';\n\t\t\t\trequest = index.openCursor(keyRange, <IDBCursorDirection>order);\n\t\t\t} else {\n\t\t\t\trequest = objectStore.openCursor(keyRange);\n\t\t\t}\n\n\t\t\trequest.onerror = function(e) {\n\t\t\t\treject(e);\n\t\t\t};\n\n\t\t\trequest.onsuccess = function(evt: Event) {\n\t\t\t\tlet cursor = (<IDBOpenDBRequest>evt.target).result;\n\t\t\t\tif (cursor) {\n\t\t\t\t\tresult.push(cursor['value']);\n\t\t\t\t\tcursor['continue']();\n\t\t\t\t} else {\n\t\t\t\t\tresolve(result);\n\t\t\t\t}\n\t\t\t};\n\t\t});\n\t}\n\n\tadd(storeName: string, value: any, key?: any) {\n\t\treturn new Promise<any>((resolve, reject) => {\n\t\t\tthis.dbWrapper.validateBeforeTransaction(storeName, reject);\n\t\t\tlet transaction = this.dbWrapper.createTransaction(\n\t\t\t\t\tthis.dbWrapper.optionsGenerator(DBMode.readwrite, storeName, reject, resolve)\n\t\t\t\t),\n\t\t\t\tobjectStore = transaction.objectStore(storeName);\n\n\t\t\tlet request = objectStore.add(value, key);\n\t\t\trequest.onsuccess = (evt: any) => {\n\t\t\t\tkey = evt.target.result;\n\t\t\t\tresolve(evt);\n\t\t\t};\n\t\t});\n\t}\n\n\tcount(storeName: string, keyRange?: IDBValidKey | IDBKeyRange) {\n\t\treturn new Promise<any>((resolve, reject) => {\n\t\t\tthis.dbWrapper.validateBeforeTransaction(storeName, reject);\n\n\t\t\tlet transaction = this.dbWrapper.createTransaction(\n\t\t\t\t\tthis.dbWrapper.optionsGenerator(DBMode.readonly, storeName, reject, resolve)\n\t\t\t\t),\n\t\t\t\tobjectStore = transaction.objectStore(storeName),\n\t\t\t\trequest: IDBRequest;\n\n\t\t\trequest = objectStore.count(keyRange);\n\n\t\t\trequest.onerror = e => reject(e);\n\t\t\trequest.onsuccess = e => resolve((<any>e.target).result);\n\t\t});\n\t}\n\n\tupdate(storeName: string, value: any, key?: any) {\n\t\treturn new Promise<any>((resolve, reject) => {\n\t\t\tthis.dbWrapper.validateBeforeTransaction(storeName, reject);\n\n\t\t\tlet transaction = this.dbWrapper.createTransaction(\n\t\t\t\t\tthis.dbWrapper.optionsGenerator(DBMode.readwrite, storeName, reject, resolve)\n\t\t\t\t),\n\t\t\t\tobjectStore = transaction.objectStore(storeName);\n\n\t\t\tobjectStore.put(value, key);\n\t\t});\n\t}\n\n\tdelete(storeName: string, key: any) {\n\t\treturn new Promise<any>((resolve, reject) => {\n\t\t\tthis.dbWrapper.validateBeforeTransaction(storeName, reject);\n\n\t\t\tlet transaction = this.dbWrapper.createTransaction(\n\t\t\t\t\tthis.dbWrapper.optionsGenerator(DBMode.readwrite, storeName, reject, resolve)\n\t\t\t\t),\n\t\t\t\tobjectStore = transaction.objectStore(storeName);\n\n\t\t\tobjectStore['delete'](key);\n\t\t});\n\t}\n\n\tdeleteDatabase() {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tthis.dbWrapper.db.close();\n\t\t\tconst deleteDBRequest = this.utils.indexedDB.deleteDatabase(this.dbWrapper.dbName);\n\t\t\tdeleteDBRequest.onsuccess = resolve;\n\t\t\tdeleteDBRequest.onerror = reject;\n\t\t\tdeleteDBRequest.onblocked = () => {\n\t\t\t\tthrow new Error(\"Unable to delete database because it's blocked\");\n\t\t\t};\n\t\t});\n\t}\n\n\topenCursor(storeName: string, cursorCallback: (evt: Event) => void, keyRange?: IDBKeyRange) {\n\t\treturn new Promise<any>((resolve, reject) => {\n\t\t\tthis.dbWrapper.validateBeforeTransaction(storeName, reject);\n\t\t\tlet transaction = this.dbWrapper.createTransaction(\n\t\t\t\t\tthis.dbWrapper.optionsGenerator(DBMode.readonly, storeName, reject, resolve)\n\t\t\t\t),\n\t\t\t\tobjectStore = transaction.objectStore(storeName),\n\t\t\t\trequest = objectStore.openCursor(keyRange);\n\n\t\t\trequest.onsuccess = (evt: Event) => {\n\t\t\t\tcursorCallback(evt);\n\t\t\t\tresolve();\n\t\t\t};\n\t\t});\n\t}\n\n\tclear(storeName: string) {\n\t\treturn new Promise<any>((resolve, reject) => {\n\t\t\tthis.dbWrapper.validateBeforeTransaction(storeName, reject);\n\t\t\tlet transaction = this.dbWrapper.createTransaction(\n\t\t\t\t\tthis.dbWrapper.optionsGenerator(DBMode.readwrite, storeName, reject, resolve)\n\t\t\t\t),\n\t\t\t\tobjectStore = transaction.objectStore(storeName);\n\t\t\tobjectStore.clear();\n\t\t\tresolve();\n\t\t});\n\t}\n\n\tgetByIndex(storeName: string, indexName: string, key: any) {\n\t\treturn new Promise<any>((resolve, reject) => {\n\t\t\tthis.dbWrapper.validateBeforeTransaction(storeName, reject);\n\t\t\tlet transaction = this.dbWrapper.createTransaction(\n\t\t\t\t\tthis.dbWrapper.optionsGenerator(DBMode.readonly, storeName, reject, resolve)\n\t\t\t\t),\n\t\t\t\tobjectStore = transaction.objectStore(storeName),\n\t\t\t\tindex = objectStore.index(indexName),\n\t\t\t\trequest = index.get(key);\n\t\t\trequest.onsuccess = event => {\n\t\t\t\tresolve((<IDBOpenDBRequest>event.target).result);\n\t\t\t};\n\t\t});\n\t}\n}\n\nexport class Utils {\n\tindexedDB: IDBFactory;\n\n\tconstructor() {\n\t\tthis.indexedDB =\n\t\t\twindow.indexedDB ||\n\t\t\t(<any>window).mozIndexedDB ||\n\t\t\t(<any>window).webkitIndexedDB ||\n\t\t\t(<any>window).msIndexedDB;\n\t}\n}\n\nexport interface IndexDetails {\n\tindexName: string;\n\torder: string;\n}\n\nexport class DbWrapper {\n\tdbName: string;\n\tdbVersion: number;\n\tdb: IDBDatabase;\n\n\tconstructor(dbName: string, version: number) {\n\t\tthis.dbName = dbName;\n\t\tthis.dbVersion = version || 1;\n\t}\n\n\tvalidateStoreName(storeName: string) {\n\t\treturn this.db.objectStoreNames.contains(storeName);\n\t}\n\n\tvalidateBeforeTransaction(storeName: string, reject: Function) {\n\t\tif (!this.db) {\n\t\t\treject('You need to use the openDatabase function to create a database before you query it!');\n\t\t}\n\t\tif (!this.validateStoreName(storeName)) {\n\t\t\treject('objectStore does not exists: ' + storeName);\n\t\t}\n\t}\n\n\tcreateTransaction(options: Options): IDBTransaction {\n\t\tlet trans: IDBTransaction = this.db.transaction(options.storeName, options.dbMode);\n\t\ttrans.onerror = options.error;\n\t\ttrans.oncomplete = options.complete;\n\t\ttrans.onabort = options.abort;\n\t\treturn trans;\n\t}\n\n\toptionsGenerator(type: any, storeName: any, reject: Function, resolve: Function): Options {\n\t\treturn {\n\t\t\tstoreName: storeName,\n\t\t\tdbMode: type,\n\t\t\terror: (e: Event) => {\n\t\t\t\treject(e);\n\t\t\t},\n\t\t\tcomplete: (e: Event) => {\n\t\t\t\tresolve();\n\t\t\t},\n\t\t\tabort: (e: Event) => {\n\t\t\t\treject(e);\n\t\t\t}\n\t\t};\n\t}\n}\n\nexport interface Options {\n\tstoreName: string;\n\tdbMode: IDBTransactionMode;\n\terror: (e: Event) => any;\n\tcomplete: (e: Event) => any;\n\tabort?: any;\n}\n\nexport enum DBMode {\n\treadonly = 'readonly',\n\treadwrite = 'readwrite'\n}\n"]}